{
  "schema_version": "1.0.0",
  "namespaces": [
    {
      "name": "Vaadin",
      "description": "",
      "summary": "",
      "sourceRange": {
        "file": "vaadin-grid-column-group.html",
        "start": {
          "line": 287,
          "column": 6
        },
        "end": {
          "line": 287,
          "column": 42
        }
      },
      "elements": [
        {
          "description": "TODO: Default template needed!",
          "summary": "",
          "path": "vaadin-grid-scroller.html",
          "properties": [
            {
              "name": "size",
              "type": "number",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_vidxOffset",
              "type": "?",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 25,
                  "column": 10
                },
                "end": {
                  "line": 27,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0"
            }
          ],
          "methods": [
            {
              "name": "_updateScrollerItem",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 40,
                  "column": 6
                },
                "end": {
                  "line": 40,
                  "column": 41
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "item"
                },
                {
                  "name": "index"
                }
              ]
            },
            {
              "name": "_afterScroll",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 44,
                  "column": 6
                },
                "end": {
                  "line": 44,
                  "column": 23
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_getRowTarget",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 48,
                  "column": 6
                },
                "end": {
                  "line": 48,
                  "column": 24
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_createScrollerRows",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 52,
                  "column": 6
                },
                "end": {
                  "line": 52,
                  "column": 30
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "scrollToIndex",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 57,
                  "column": 6
                },
                "end": {
                  "line": 79,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "index"
                }
              ]
            },
            {
              "name": "_sizeChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 81,
                  "column": 6
                },
                "end": {
                  "line": 98,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "size"
                }
              ]
            },
            {
              "name": "_increasePoolIfNeeded",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 100,
                  "column": 6
                },
                "end": {
                  "line": 111,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "count"
                }
              ]
            },
            {
              "name": "_createPool",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 113,
                  "column": 6
                },
                "end": {
                  "line": 133,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "size"
                }
              ]
            },
            {
              "name": "_assignModels",
              "description": "Assigns the data models to a given set of items.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 139,
                  "column": 6
                },
                "end": {
                  "line": 149,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "itemSet",
                  "type": "!Array.<number>="
                }
              ]
            },
            {
              "name": "_scrollHandler",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 151,
                  "column": 6
                },
                "end": {
                  "line": 162,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_createFocusBackfillItem",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 164,
                  "column": 6
                },
                "end": {
                  "line": 166,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_multiSelectionChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 168,
                  "column": 6
                },
                "end": {
                  "line": 170,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "clearSelection",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 172,
                  "column": 6
                },
                "end": {
                  "line": 174,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_itemsChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 176,
                  "column": 6
                },
                "end": {
                  "line": 178,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_adjustVirtualIndexOffset",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 219,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "delta"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 15,
              "column": 4
            },
            "end": {
              "line": 221,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Vaadin.GridScrollerElement",
          "attributes": [
            {
              "name": "size",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 23,
                  "column": 22
                }
              },
              "metadata": {},
              "type": "number"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "vaadin-grid-scroller"
        },
        {
          "description": "A `vaadin-grid-column` is used to configure how a column in `vaadin-grid` should look like by using HTML templates.\nA column can have a template for each of the three table sections: header, body and footer.\n\nThe `class` attribute is used to differentiate header and footer templates from the body template.\n\n#### Example:\n\n    <vaadin-grid-column>\n      <template class=\"header\">I'm in the header</template>\n      <template>I'm in the body</template>\n      <template class=\"footer\">I'm in the footer</template>\n    </vaadin-grid-column>",
          "summary": "",
          "path": "vaadin-grid-column.html",
          "properties": [
            {
              "name": "resizable",
              "type": "boolean",
              "description": "When set to true, the column is user-resizable.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 24,
                  "column": 8
                },
                "end": {
                  "line": 38,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "headerTemplate",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 43,
                  "column": 8
                },
                "end": {
                  "line": 45,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "footerTemplate",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 50,
                  "column": 8
                },
                "end": {
                  "line": 52,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "frozen",
              "type": "boolean",
              "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 58,
                  "column": 8
                },
                "end": {
                  "line": 61,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "hidden",
              "type": "boolean",
              "description": "When set to true, the cells for this column are hidden.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 66,
                  "column": 8
                },
                "end": {
                  "line": 68,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_lastFrozen",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 70,
                  "column": 8
                },
                "end": {
                  "line": 73,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_order",
              "type": "number",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 75,
                  "column": 8
                },
                "end": {
                  "line": 75,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_reorderStatus",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 77,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_emptyCells",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 79,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 26
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_headerCell",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 81,
                  "column": 8
                },
                "end": {
                  "line": 81,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_footerCell",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 83,
                  "column": 8
                },
                "end": {
                  "line": 83,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_grid",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 85,
                  "column": 8
                },
                "end": {
                  "line": 85,
                  "column": 21
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            }
          ],
          "methods": [
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 107,
                  "column": 4
                },
                "end": {
                  "line": 123,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 126,
                  "column": 4
                },
                "end": {
                  "line": 138,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_prepareHeaderTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 174,
                  "column": 4
                },
                "end": {
                  "line": 176,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_prepareFooterTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 178,
                  "column": 4
                },
                "end": {
                  "line": 180,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_prepareBodyTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 182,
                  "column": 4
                },
                "end": {
                  "line": 184,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_prepareTemplatizer",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 186,
                  "column": 4
                },
                "end": {
                  "line": 197,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "instanceProps"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_emptyCellsChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 199,
                  "column": 4
                },
                "end": {
                  "line": 201,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "emptyCells"
                },
                {
                  "name": "splices"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_stampBodyTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 203,
                  "column": 4
                },
                "end": {
                  "line": 221,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_stampHeaderTemplate",
              "description": "TODO: DRY",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 224,
                  "column": 4
                },
                "end": {
                  "line": 233,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "headerTemplate"
                },
                {
                  "name": "headerCell"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_stampFooterTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 235,
                  "column": 4
                },
                "end": {
                  "line": 244,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "footerTemplate"
                },
                {
                  "name": "footerCell"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_selectFirstTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 246,
                  "column": 4
                },
                "end": {
                  "line": 250,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_findTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 252,
                  "column": 4
                },
                "end": {
                  "line": 261,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_headerTemplateChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 263,
                  "column": 4
                },
                "end": {
                  "line": 265,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "headerTemplate"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_footerTemplateChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 267,
                  "column": 4
                },
                "end": {
                  "line": 269,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "footerTemplate"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_flexGrowChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 271,
                  "column": 4
                },
                "end": {
                  "line": 277,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "flexGrow"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_orderChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 279,
                  "column": 4
                },
                "end": {
                  "line": 281,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "order"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_widthChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 283,
                  "column": 4
                },
                "end": {
                  "line": 289,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_frozenChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 291,
                  "column": 4
                },
                "end": {
                  "line": 299,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "frozen"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_lastFrozenChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 301,
                  "column": 4
                },
                "end": {
                  "line": 307,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "lastFrozen"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_toggleAttribute",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 309,
                  "column": 4
                },
                "end": {
                  "line": 315,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name"
                },
                {
                  "name": "on"
                },
                {
                  "name": "element"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_resizableChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 317,
                  "column": 4
                },
                "end": {
                  "line": 338,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "resizable"
                },
                {
                  "name": "headerCell"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_templateChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 409,
                  "column": 6
                },
                "end": {
                  "line": 418,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                }
              ]
            },
            {
              "name": "_hiddenChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 420,
                  "column": 6
                },
                "end": {
                  "line": 431,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hidden"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ]
            },
            {
              "name": "_reorderStatusChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 433,
                  "column": 6
                },
                "end": {
                  "line": 435,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "reorderStatus"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 363,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Vaadin.GridColumnElement",
          "attributes": [
            {
              "name": "resizable",
              "description": "When set to true, the column is user-resizable.",
              "sourceRange": {
                "start": {
                  "line": 24,
                  "column": 8
                },
                "end": {
                  "line": 38,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "frozen",
              "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
              "sourceRange": {
                "start": {
                  "line": 58,
                  "column": 8
                },
                "end": {
                  "line": 61,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "hidden",
              "description": "When set to true, the cells for this column are hidden.",
              "sourceRange": {
                "start": {
                  "line": 66,
                  "column": 8
                },
                "end": {
                  "line": 68,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "vaadin-grid-column",
          "mixins": [
            "Vaadin.Grid.ColumnBaseMixin"
          ]
        },
        {
          "description": "### Styling\n\nThe following shadow DOM parts are exposed for styling:\n\nPart name | Description\n----------------|----------------\n`row` | Row in the internal table\n`cell` | Cell in the internal table\n`header-cell` | Header cell in the internal table\n`body-cell` | Body cell in the internal table\n`footer-cell` | Footer cell in the internal table\n`details-cell` | Row details cell in the internal table\n`resize-handle` | Handle for resizing the columns",
          "summary": "",
          "path": "vaadin-grid.html",
          "properties": [
            {
              "name": "pageSize",
              "type": "number",
              "description": "Number of items fetched at a time from the dataprovider.",
              "privacy": "public",
              "sourceRange": {
                "file": "vaadin-grid-data-provider-mixin.html",
                "start": {
                  "line": 70,
                  "column": 8
                },
                "end": {
                  "line": 74,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"_pageSizeChanged\""
                }
              },
              "defaultValue": "50",
              "inheritedFrom": "Vaadin.Grid.DataProviderMixin"
            },
            {
              "name": "dataProvider",
              "type": "Object",
              "description": "Function that provides items lazily. Receives arguments `params`, `callback`\n\n`params.page` Requested page index\n\n`params.pageSize` Current page size\n\n`params.filters` Currently applied filters\n\n`params.sortOrders` Currently applied sorting orders",
              "privacy": "public",
              "sourceRange": {
                "file": "vaadin-grid-data-provider-mixin.html",
                "start": {
                  "line": 88,
                  "column": 8
                },
                "end": {
                  "line": 92,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "observer": "\"_dataProviderChanged\""
                }
              },
              "inheritedFrom": "Vaadin.Grid.DataProviderMixin"
            },
            {
              "name": "_loading",
              "type": "boolean",
              "description": "`true` while data is being requested from the data provider.",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-data-provider-mixin.html",
                "start": {
                  "line": 97,
                  "column": 8
                },
                "end": {
                  "line": 97,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.DataProviderMixin"
            },
            {
              "name": "_cache",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-data-provider-mixin.html",
                "start": {
                  "line": 99,
                  "column": 8
                },
                "end": {
                  "line": 104,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}",
              "inheritedFrom": "Vaadin.Grid.DataProviderMixin"
            },
            {
              "name": "_pendingRequests",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-data-provider-mixin.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 111,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "{}",
              "inheritedFrom": "Vaadin.Grid.DataProviderMixin"
            },
            {
              "name": "items",
              "type": "Array",
              "description": "An array containing the items which will be stamped to the column template\ninstances.",
              "privacy": "public",
              "sourceRange": {
                "file": "vaadin-grid-array-data-provider-mixin.html",
                "start": {
                  "line": 22,
                  "column": 8
                },
                "end": {
                  "line": 22,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ArrayDataProviderMixin"
            },
            {
              "name": "activeItem",
              "type": "Object",
              "description": "The item user has last interacted with. Turns to `null` after user deactivates\nthe item by re-interacting with the currently active item.",
              "privacy": "public",
              "sourceRange": {
                "file": "vaadin-grid-active-item-mixin.html",
                "start": {
                  "line": 21,
                  "column": 8
                },
                "end": {
                  "line": 25,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "null",
              "inheritedFrom": "Vaadin.Grid.ActiveItemMixin"
            },
            {
              "name": "ios",
              "type": "boolean",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "vaadin-grid-scroll-mixin.html",
                "start": {
                  "line": 63,
                  "column": 8
                },
                "end": {
                  "line": 67,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ScrollMixin"
            },
            {
              "name": "fixedSections",
              "type": "boolean",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "vaadin-grid-scroll-mixin.html",
                "start": {
                  "line": 69,
                  "column": 8
                },
                "end": {
                  "line": 73,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "inheritedFrom": "Vaadin.Grid.ScrollMixin"
            },
            {
              "name": "_frozenCells",
              "type": "Array",
              "description": "Cached array of frozen cells",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-scroll-mixin.html",
                "start": {
                  "line": 76,
                  "column": 8
                },
                "end": {
                  "line": 81,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]",
              "inheritedFrom": "Vaadin.Grid.ScrollMixin"
            },
            {
              "name": "scrolling",
              "type": "boolean",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "vaadin-grid-scroll-mixin.html",
                "start": {
                  "line": 83,
                  "column": 8
                },
                "end": {
                  "line": 86,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ScrollMixin"
            },
            {
              "name": "_scrollbarWidth",
              "type": "number",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-scroll-mixin.html",
                "start": {
                  "line": 88,
                  "column": 8
                },
                "end": {
                  "line": 105,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ScrollMixin"
            },
            {
              "name": "selectedItems",
              "type": "Object",
              "description": "An array that contains the selected items.",
              "privacy": "public",
              "sourceRange": {
                "file": "vaadin-grid-selection-mixin.html",
                "start": {
                  "line": 20,
                  "column": 8
                },
                "end": {
                  "line": 24,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "[]",
              "inheritedFrom": "Vaadin.Grid.SelectionMixin"
            },
            {
              "name": "multiSort",
              "type": "boolean",
              "description": "When `true`, all `<vaadin-grid-sorter>` are applied for sorting.",
              "privacy": "public",
              "sourceRange": {
                "file": "vaadin-grid-sort-mixin.html",
                "start": {
                  "line": 19,
                  "column": 8
                },
                "end": {
                  "line": 22,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "Vaadin.Grid.SortMixin"
            },
            {
              "name": "_sorters",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-sort-mixin.html",
                "start": {
                  "line": 24,
                  "column": 8
                },
                "end": {
                  "line": 29,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]",
              "inheritedFrom": "Vaadin.Grid.SortMixin"
            },
            {
              "name": "_previousSorters",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-sort-mixin.html",
                "start": {
                  "line": 31,
                  "column": 8
                },
                "end": {
                  "line": 36,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]",
              "inheritedFrom": "Vaadin.Grid.SortMixin"
            },
            {
              "name": "expandedItems",
              "type": "Array",
              "description": "An array containing references to expanded items.",
              "privacy": "public",
              "sourceRange": {
                "file": "vaadin-grid-row-details-mixin.html",
                "start": {
                  "line": 36,
                  "column": 8
                },
                "end": {
                  "line": 41,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]",
              "inheritedFrom": "Vaadin.Grid.RowDetailsMixin"
            },
            {
              "name": "_rowDetailsTemplate",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-row-details-mixin.html",
                "start": {
                  "line": 43,
                  "column": 8
                },
                "end": {
                  "line": 43,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.RowDetailsMixin"
            },
            {
              "name": "_detailsCells",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-row-details-mixin.html",
                "start": {
                  "line": 45,
                  "column": 8
                },
                "end": {
                  "line": 47,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.RowDetailsMixin"
            },
            {
              "name": "_headerFocusable",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-keyboard-navigation-mixin.html",
                "start": {
                  "line": 16,
                  "column": 8
                },
                "end": {
                  "line": 19,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"_focusableChanged\""
                }
              },
              "inheritedFrom": "Vaadin.Grid.KeyboardNavigationMixin"
            },
            {
              "name": "_itemsFocusable",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-keyboard-navigation-mixin.html",
                "start": {
                  "line": 20,
                  "column": 8
                },
                "end": {
                  "line": 23,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"_focusableChanged\""
                }
              },
              "inheritedFrom": "Vaadin.Grid.KeyboardNavigationMixin"
            },
            {
              "name": "_footerFocusable",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-keyboard-navigation-mixin.html",
                "start": {
                  "line": 24,
                  "column": 8
                },
                "end": {
                  "line": 27,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"_focusableChanged\""
                }
              },
              "inheritedFrom": "Vaadin.Grid.KeyboardNavigationMixin"
            },
            {
              "name": "interacting",
              "type": "boolean",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "vaadin-grid-keyboard-navigation-mixin.html",
                "start": {
                  "line": 28,
                  "column": 8
                },
                "end": {
                  "line": 32,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "Vaadin.Grid.KeyboardNavigationMixin"
            },
            {
              "name": "navigating",
              "type": "boolean",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "vaadin-grid-keyboard-navigation-mixin.html",
                "start": {
                  "line": 33,
                  "column": 8
                },
                "end": {
                  "line": 37,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "Vaadin.Grid.KeyboardNavigationMixin"
            },
            {
              "name": "_focusedColumnOrder",
              "type": "number",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-keyboard-navigation-mixin.html",
                "start": {
                  "line": 38,
                  "column": 8
                },
                "end": {
                  "line": 38,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.KeyboardNavigationMixin"
            },
            {
              "name": "_filters",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-filter-mixin.html",
                "start": {
                  "line": 17,
                  "column": 8
                },
                "end": {
                  "line": 22,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]",
              "inheritedFrom": "Vaadin.Grid.FilterMixin"
            },
            {
              "name": "columnReorderingAllowed",
              "type": "boolean",
              "description": "Set to true to allow column reordering.",
              "privacy": "public",
              "sourceRange": {
                "file": "vaadin-grid-column-reordering-mixin.html",
                "start": {
                  "line": 51,
                  "column": 8
                },
                "end": {
                  "line": 54,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "Vaadin.Grid.ColumnReorderingMixin"
            },
            {
              "name": "_orderBaseScope",
              "type": "number",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column-reordering-mixin.html",
                "start": {
                  "line": 56,
                  "column": 8
                },
                "end": {
                  "line": 59,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "10000000",
              "inheritedFrom": "Vaadin.Grid.ColumnReorderingMixin"
            },
            {
              "name": "_touchDevice",
              "type": "?",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column-reordering-mixin.html",
                "start": {
                  "line": 61,
                  "column": 8
                },
                "end": {
                  "line": 70,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnReorderingMixin"
            },
            {
              "name": "_safari",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 124,
                  "column": 10
                },
                "end": {
                  "line": 127,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_this",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 129,
                  "column": 10
                },
                "end": {
                  "line": 134,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_ios",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 136,
                  "column": 10
                },
                "end": {
                  "line": 141,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 391,
                  "column": 6
                },
                "end": {
                  "line": 399,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_templateItemChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-data-provider-mixin.html",
                "start": {
                  "line": 120,
                  "column": 4
                },
                "end": {
                  "line": 136,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.DataProviderMixin"
            },
            {
              "name": "_getCachedItem",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-data-provider-mixin.html",
                "start": {
                  "line": 138,
                  "column": 4
                },
                "end": {
                  "line": 148,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "index"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.DataProviderMixin"
            },
            {
              "name": "_getItem",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-data-provider-mixin.html",
                "start": {
                  "line": 150,
                  "column": 4
                },
                "end": {
                  "line": 177,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "index"
                },
                {
                  "name": "el"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.DataProviderMixin"
            },
            {
              "name": "_cachedPagesForPhysicalItems",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-data-provider-mixin.html",
                "start": {
                  "line": 179,
                  "column": 4
                },
                "end": {
                  "line": 183,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.DataProviderMixin"
            },
            {
              "name": "_uncachedPagesForPhysicalItems",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-data-provider-mixin.html",
                "start": {
                  "line": 185,
                  "column": 4
                },
                "end": {
                  "line": 189,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.DataProviderMixin"
            },
            {
              "name": "_eagerlyLoadPages",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-data-provider-mixin.html",
                "start": {
                  "line": 191,
                  "column": 4
                },
                "end": {
                  "line": 205,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.DataProviderMixin"
            },
            {
              "name": "_pagesForPhysicalItems",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-data-provider-mixin.html",
                "start": {
                  "line": 207,
                  "column": 4
                },
                "end": {
                  "line": 224,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.DataProviderMixin"
            },
            {
              "name": "_updateItems",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-data-provider-mixin.html",
                "start": {
                  "line": 226,
                  "column": 4
                },
                "end": {
                  "line": 241,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "page"
                },
                {
                  "name": "items"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.DataProviderMixin"
            },
            {
              "name": "_loadPage",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-data-provider-mixin.html",
                "start": {
                  "line": 243,
                  "column": 4
                },
                "end": {
                  "line": 269,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "page"
                },
                {
                  "name": "cb"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.DataProviderMixin"
            },
            {
              "name": "_getPageForIndex",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-data-provider-mixin.html",
                "start": {
                  "line": 271,
                  "column": 4
                },
                "end": {
                  "line": 273,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "index"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.DataProviderMixin"
            },
            {
              "name": "clearCache",
              "description": "Clears the cached pages and reloads data from dataprovider when needed.",
              "privacy": "public",
              "sourceRange": {
                "file": "vaadin-grid-data-provider-mixin.html",
                "start": {
                  "line": 278,
                  "column": 4
                },
                "end": {
                  "line": 285,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.DataProviderMixin"
            },
            {
              "name": "_flushItemsDebouncer",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-data-provider-mixin.html",
                "start": {
                  "line": 287,
                  "column": 4
                },
                "end": {
                  "line": 291,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.DataProviderMixin"
            },
            {
              "name": "_pageSizeChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-data-provider-mixin.html",
                "start": {
                  "line": 293,
                  "column": 4
                },
                "end": {
                  "line": 297,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "pageSize"
                },
                {
                  "name": "oldPageSize"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.DataProviderMixin"
            },
            {
              "name": "_checkSize",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-data-provider-mixin.html",
                "start": {
                  "line": 299,
                  "column": 4
                },
                "end": {
                  "line": 303,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.DataProviderMixin"
            },
            {
              "name": "_dataProviderChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-data-provider-mixin.html",
                "start": {
                  "line": 305,
                  "column": 4
                },
                "end": {
                  "line": 318,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dataProvider"
                },
                {
                  "name": "oldDataProvider"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.DataProviderMixin"
            },
            {
              "name": "_itemsChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-array-data-provider-mixin.html",
                "start": {
                  "line": 33,
                  "column": 4
                },
                "end": {
                  "line": 44,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "items"
                },
                {
                  "name": "splices"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ArrayDataProviderMixin"
            },
            {
              "name": "_arrayDataProvider",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-array-data-provider-mixin.html",
                "start": {
                  "line": 46,
                  "column": 4
                },
                "end": {
                  "line": 63,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "opts"
                },
                {
                  "name": "cb"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ArrayDataProviderMixin"
            },
            {
              "name": "_checkPaths",
              "description": "Check array of filters/sorters for paths validity, console.warn invalid items",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-array-data-provider-mixin.html",
                "start": {
                  "line": 71,
                  "column": 4
                },
                "end": {
                  "line": 96,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "arrayToCheck",
                  "type": "Array",
                  "description": "The array of filters/sorters to check"
                },
                {
                  "name": "action",
                  "type": "string",
                  "description": "The name of action to include in warning (filtering, sorting)"
                },
                {
                  "name": "items",
                  "type": "Array"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ArrayDataProviderMixin"
            },
            {
              "name": "_multiSort",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-array-data-provider-mixin.html",
                "start": {
                  "line": 98,
                  "column": 4
                },
                "end": {
                  "line": 109,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "a"
                },
                {
                  "name": "b"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ArrayDataProviderMixin"
            },
            {
              "name": "_normalizeEmptyValue",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-array-data-provider-mixin.html",
                "start": {
                  "line": 111,
                  "column": 4
                },
                "end": {
                  "line": 119,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ArrayDataProviderMixin"
            },
            {
              "name": "_compare",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-array-data-provider-mixin.html",
                "start": {
                  "line": 121,
                  "column": 4
                },
                "end": {
                  "line": 132,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "a"
                },
                {
                  "name": "b"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ArrayDataProviderMixin"
            },
            {
              "name": "_filter",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-array-data-provider-mixin.html",
                "start": {
                  "line": 134,
                  "column": 4
                },
                "end": {
                  "line": 141,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "items"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ArrayDataProviderMixin"
            },
            {
              "name": "_hasColumnGroups",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-dynamic-columns-mixin.html",
                "start": {
                  "line": 20,
                  "column": 4
                },
                "end": {
                  "line": 28,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "columns"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.DynamicColumnsMixin"
            },
            {
              "name": "_getChildColumns",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-dynamic-columns-mixin.html",
                "start": {
                  "line": 30,
                  "column": 4
                },
                "end": {
                  "line": 35,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "el"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.DynamicColumnsMixin"
            },
            {
              "name": "_flattenColumnGroups",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-dynamic-columns-mixin.html",
                "start": {
                  "line": 37,
                  "column": 4
                },
                "end": {
                  "line": 47,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "columns"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.DynamicColumnsMixin"
            },
            {
              "name": "_getColumnTree",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-dynamic-columns-mixin.html",
                "start": {
                  "line": 49,
                  "column": 4
                },
                "end": {
                  "line": 64,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.DynamicColumnsMixin"
            },
            {
              "name": "_updateColumnTree",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-dynamic-columns-mixin.html",
                "start": {
                  "line": 66,
                  "column": 4
                },
                "end": {
                  "line": 71,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.DynamicColumnsMixin"
            },
            {
              "name": "_addNodeObserver",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-dynamic-columns-mixin.html",
                "start": {
                  "line": 73,
                  "column": 4
                },
                "end": {
                  "line": 95,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.DynamicColumnsMixin"
            },
            {
              "name": "_arrayEquals",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-dynamic-columns-mixin.html",
                "start": {
                  "line": 97,
                  "column": 4
                },
                "end": {
                  "line": 114,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "arr1"
                },
                {
                  "name": "arr2"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.DynamicColumnsMixin"
            },
            {
              "name": "_checkImports",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-dynamic-columns-mixin.html",
                "start": {
                  "line": 116,
                  "column": 4
                },
                "end": {
                  "line": 128,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.DynamicColumnsMixin"
            },
            {
              "name": "_updateLastColumn",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-dynamic-columns-mixin.html",
                "start": {
                  "line": 130,
                  "column": 4
                },
                "end": {
                  "line": 139,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.DynamicColumnsMixin"
            },
            {
              "name": "_cellContentFocusHandler",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-cell-click-mixin.html",
                "start": {
                  "line": 23,
                  "column": 4
                },
                "end": {
                  "line": 30,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.CellClickMixin"
            },
            {
              "name": "_getCellContentByElement",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-cell-click-mixin.html",
                "start": {
                  "line": 32,
                  "column": 4
                },
                "end": {
                  "line": 43,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "element"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.CellClickMixin"
            },
            {
              "name": "_getCellByCellContent",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-cell-click-mixin.html",
                "start": {
                  "line": 45,
                  "column": 4
                },
                "end": {
                  "line": 47,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cellContent"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.CellClickMixin"
            },
            {
              "name": "_onClick",
              "description": "yet at the point when tap event is being executed.",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-cell-click-mixin.html",
                "start": {
                  "line": 52,
                  "column": 4
                },
                "end": {
                  "line": 71,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.CellClickMixin"
            },
            {
              "name": "_isFocusable",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-cell-click-mixin.html",
                "start": {
                  "line": 73,
                  "column": 4
                },
                "end": {
                  "line": 80,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "target"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.CellClickMixin"
            },
            {
              "name": "_activateItem",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-active-item-mixin.html",
                "start": {
                  "line": 40,
                  "column": 4
                },
                "end": {
                  "line": 45,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ActiveItemMixin"
            },
            {
              "name": "_activeItemChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-active-item-mixin.html",
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 53,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ActiveItemMixin"
            },
            {
              "name": "_hasFixedSections",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-scroll-mixin.html",
                "start": {
                  "line": 116,
                  "column": 4
                },
                "end": {
                  "line": 118,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "scrollbarWidth"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ScrollMixin"
            },
            {
              "name": "_onWheel",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-scroll-mixin.html",
                "start": {
                  "line": 120,
                  "column": 4
                },
                "end": {
                  "line": 145,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ScrollMixin"
            },
            {
              "name": "_hasScrolledAncestor",
              "description": "Determines if the element has an ancestor prior to this\ncell content that handles the scroll delta",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-scroll-mixin.html",
                "start": {
                  "line": 151,
                  "column": 4
                },
                "end": {
                  "line": 157,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "el"
                },
                {
                  "name": "deltaX"
                },
                {
                  "name": "deltaY"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ScrollMixin"
            },
            {
              "name": "_canScroll",
              "description": "Determines if the the given scroll deltas can be applied to the element\n(fully or partially)",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-scroll-mixin.html",
                "start": {
                  "line": 163,
                  "column": 4
                },
                "end": {
                  "line": 168,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "el"
                },
                {
                  "name": "deltaX"
                },
                {
                  "name": "deltaY"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ScrollMixin"
            },
            {
              "name": "_afterScroll",
              "description": "Update the models, the position of the\nitems in the viewport and recycle tiles as needed.",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-scroll-mixin.html",
                "start": {
                  "line": 174,
                  "column": 4
                },
                "end": {
                  "line": 191,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ScrollMixin"
            },
            {
              "name": "_reorderRows",
              "description": "correct order needed for preserving correct tab order between cell contents.",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-scroll-mixin.html",
                "start": {
                  "line": 194,
                  "column": 4
                },
                "end": {
                  "line": 218,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ScrollMixin"
            },
            {
              "name": "_frozenCellsChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-scroll-mixin.html",
                "start": {
                  "line": 220,
                  "column": 4
                },
                "end": {
                  "line": 231,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ScrollMixin"
            },
            {
              "name": "_updateLastFrozen",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-scroll-mixin.html",
                "start": {
                  "line": 233,
                  "column": 4
                },
                "end": {
                  "line": 249,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ScrollMixin"
            },
            {
              "name": "_translateStationaryElements",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-scroll-mixin.html",
                "start": {
                  "line": 251,
                  "column": 4
                },
                "end": {
                  "line": 266,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ScrollMixin"
            },
            {
              "name": "_getTranslate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-scroll-mixin.html",
                "start": {
                  "line": 268,
                  "column": 4
                },
                "end": {
                  "line": 270,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ScrollMixin"
            },
            {
              "name": "_templateInstanceChangedSelection",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-selection-mixin.html",
                "start": {
                  "line": 39,
                  "column": 4
                },
                "end": {
                  "line": 55,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.SelectionMixin"
            },
            {
              "name": "_isSelected",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-selection-mixin.html",
                "start": {
                  "line": 57,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "item"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.SelectionMixin"
            },
            {
              "name": "selectItem",
              "description": "Selects the given item.",
              "privacy": "public",
              "sourceRange": {
                "file": "vaadin-grid-selection-mixin.html",
                "start": {
                  "line": 67,
                  "column": 4
                },
                "end": {
                  "line": 72,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "item",
                  "type": "(number|Object)",
                  "description": "The item index or the item object"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.SelectionMixin"
            },
            {
              "name": "deselectItem",
              "description": "Deselects the given item if it is already selected.",
              "privacy": "public",
              "sourceRange": {
                "file": "vaadin-grid-selection-mixin.html",
                "start": {
                  "line": 80,
                  "column": 4
                },
                "end": {
                  "line": 86,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "item",
                  "type": "(number|Object)",
                  "description": "The item index or the item object"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.SelectionMixin"
            },
            {
              "name": "_toggleItem",
              "description": "Toggles the selected state of the given item.",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-selection-mixin.html",
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 102,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "item",
                  "type": "(number|Object)",
                  "description": "The item index or the item object"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.SelectionMixin"
            },
            {
              "name": "_takeItem",
              "description": "Returns item object itself or by the item index.",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-selection-mixin.html",
                "start": {
                  "line": 109,
                  "column": 4
                },
                "end": {
                  "line": 114,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "item",
                  "type": "(number|Object)",
                  "description": "The item index or the item object"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.SelectionMixin"
            },
            {
              "name": "_selectedItemsChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-selection-mixin.html",
                "start": {
                  "line": 116,
                  "column": 4
                },
                "end": {
                  "line": 126,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.SelectionMixin"
            },
            {
              "name": "_selectedInstanceChangedCallback",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-selection-mixin.html",
                "start": {
                  "line": 128,
                  "column": 4
                },
                "end": {
                  "line": 137,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "instance"
                },
                {
                  "name": "value"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.SelectionMixin"
            },
            {
              "name": "_onSorterChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-sort-mixin.html",
                "start": {
                  "line": 61,
                  "column": 4
                },
                "end": {
                  "line": 95,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.SortMixin"
            },
            {
              "name": "_mapSorters",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-sort-mixin.html",
                "start": {
                  "line": 97,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.SortMixin"
            },
            {
              "name": "_removeArrayItem",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-sort-mixin.html",
                "start": {
                  "line": 106,
                  "column": 4
                },
                "end": {
                  "line": 111,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "array"
                },
                {
                  "name": "item"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.SortMixin"
            },
            {
              "name": "_expandedItemsChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-row-details-mixin.html",
                "start": {
                  "line": 69,
                  "column": 4
                },
                "end": {
                  "line": 87,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changeRecord"
                },
                {
                  "name": "dataProvider"
                },
                {
                  "name": "rowDetailsTemplate"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.RowDetailsMixin"
            },
            {
              "name": "_configureDetailsCell",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-row-details-mixin.html",
                "start": {
                  "line": 89,
                  "column": 4
                },
                "end": {
                  "line": 98,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cell"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.RowDetailsMixin"
            },
            {
              "name": "_toggleDetailsCell",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-row-details-mixin.html",
                "start": {
                  "line": 100,
                  "column": 4
                },
                "end": {
                  "line": 111,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "row"
                },
                {
                  "name": "item"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.RowDetailsMixin"
            },
            {
              "name": "_updateDetailsCellHeights",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-row-details-mixin.html",
                "start": {
                  "line": 113,
                  "column": 4
                },
                "end": {
                  "line": 117,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.RowDetailsMixin"
            },
            {
              "name": "_isExpanded",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-row-details-mixin.html",
                "start": {
                  "line": 119,
                  "column": 4
                },
                "end": {
                  "line": 121,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "item"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.RowDetailsMixin"
            },
            {
              "name": "expandItem",
              "description": "Expand the details row of a given item.",
              "privacy": "public",
              "sourceRange": {
                "file": "vaadin-grid-row-details-mixin.html",
                "start": {
                  "line": 126,
                  "column": 4
                },
                "end": {
                  "line": 130,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "item"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.RowDetailsMixin"
            },
            {
              "name": "collapseItem",
              "description": "Collapse the details row of a given item.",
              "privacy": "public",
              "sourceRange": {
                "file": "vaadin-grid-row-details-mixin.html",
                "start": {
                  "line": 135,
                  "column": 4
                },
                "end": {
                  "line": 139,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "item"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.RowDetailsMixin"
            },
            {
              "name": "_expandedInstanceChangedCallback",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-row-details-mixin.html",
                "start": {
                  "line": 141,
                  "column": 4
                },
                "end": {
                  "line": 150,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "instance"
                },
                {
                  "name": "value"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.RowDetailsMixin"
            },
            {
              "name": "_focusableChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-keyboard-navigation-mixin.html",
                "start": {
                  "line": 58,
                  "column": 4
                },
                "end": {
                  "line": 65,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "focusable"
                },
                {
                  "name": "oldFocusable"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.KeyboardNavigationMixin"
            },
            {
              "name": "_onKeyDown",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-keyboard-navigation-mixin.html",
                "start": {
                  "line": 67,
                  "column": 4
                },
                "end": {
                  "line": 120,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.KeyboardNavigationMixin"
            },
            {
              "name": "_onNavigationKeyDown",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-keyboard-navigation-mixin.html",
                "start": {
                  "line": 122,
                  "column": 4
                },
                "end": {
                  "line": 260,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                },
                {
                  "name": "key"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.KeyboardNavigationMixin"
            },
            {
              "name": "_onInteractionKeyDown",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-keyboard-navigation-mixin.html",
                "start": {
                  "line": 262,
                  "column": 4
                },
                "end": {
                  "line": 298,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                },
                {
                  "name": "key"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.KeyboardNavigationMixin"
            },
            {
              "name": "_predictFocusStepTarget",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-keyboard-navigation-mixin.html",
                "start": {
                  "line": 300,
                  "column": 4
                },
                "end": {
                  "line": 317,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "srcElement"
                },
                {
                  "name": "step"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.KeyboardNavigationMixin"
            },
            {
              "name": "_onTabKeyDown",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-keyboard-navigation-mixin.html",
                "start": {
                  "line": 319,
                  "column": 4
                },
                "end": {
                  "line": 328,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.KeyboardNavigationMixin"
            },
            {
              "name": "_onSpaceKeyDown",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-keyboard-navigation-mixin.html",
                "start": {
                  "line": 330,
                  "column": 4
                },
                "end": {
                  "line": 341,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.KeyboardNavigationMixin"
            },
            {
              "name": "_onFocusIn",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-keyboard-navigation-mixin.html",
                "start": {
                  "line": 343,
                  "column": 4
                },
                "end": {
                  "line": 353,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.KeyboardNavigationMixin"
            },
            {
              "name": "_onFocusOut",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-keyboard-navigation-mixin.html",
                "start": {
                  "line": 355,
                  "column": 4
                },
                "end": {
                  "line": 358,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.KeyboardNavigationMixin"
            },
            {
              "name": "_onCellFocus",
              "description": "Mouse click focuses the cell",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-keyboard-navigation-mixin.html",
                "start": {
                  "line": 363,
                  "column": 4
                },
                "end": {
                  "line": 375,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.KeyboardNavigationMixin"
            },
            {
              "name": "_detectInteracting",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-keyboard-navigation-mixin.html",
                "start": {
                  "line": 377,
                  "column": 4
                },
                "end": {
                  "line": 379,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.KeyboardNavigationMixin"
            },
            {
              "name": "_getColumns",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-keyboard-navigation-mixin.html",
                "start": {
                  "line": 381,
                  "column": 4
                },
                "end": {
                  "line": 389,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "rowGroup"
                },
                {
                  "name": "rowIndex"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.KeyboardNavigationMixin"
            },
            {
              "name": "_resetKeyboardNavigation",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-keyboard-navigation-mixin.html",
                "start": {
                  "line": 391,
                  "column": 4
                },
                "end": {
                  "line": 407,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.KeyboardNavigationMixin"
            },
            {
              "name": "_focusCell",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-keyboard-navigation-mixin.html",
                "start": {
                  "line": 409,
                  "column": 4
                },
                "end": {
                  "line": 419,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cell"
                },
                {
                  "name": "rowGroup"
                },
                {
                  "name": "ignoreFocusInCellContent"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.KeyboardNavigationMixin"
            },
            {
              "name": "_scrollHorizontallyToCell",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-keyboard-navigation-mixin.html",
                "start": {
                  "line": 421,
                  "column": 4
                },
                "end": {
                  "line": 463,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dstCell"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.KeyboardNavigationMixin"
            },
            {
              "name": "_filterChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-filter-mixin.html",
                "start": {
                  "line": 31,
                  "column": 4
                },
                "end": {
                  "line": 41,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.FilterMixin"
            },
            {
              "name": "_mapFilters",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-filter-mixin.html",
                "start": {
                  "line": 43,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.FilterMixin"
            },
            {
              "name": "_onContextMenu",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column-reordering-mixin.html",
                "start": {
                  "line": 90,
                  "column": 4
                },
                "end": {
                  "line": 94,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnReorderingMixin"
            },
            {
              "name": "_onTouchStart",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column-reordering-mixin.html",
                "start": {
                  "line": 96,
                  "column": 4
                },
                "end": {
                  "line": 106,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnReorderingMixin"
            },
            {
              "name": "_onTouchMove",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column-reordering-mixin.html",
                "start": {
                  "line": 108,
                  "column": 4
                },
                "end": {
                  "line": 113,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnReorderingMixin"
            },
            {
              "name": "_onTouchEnd",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column-reordering-mixin.html",
                "start": {
                  "line": 115,
                  "column": 4
                },
                "end": {
                  "line": 118,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnReorderingMixin"
            },
            {
              "name": "_onTrackEvent",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column-reordering-mixin.html",
                "start": {
                  "line": 120,
                  "column": 4
                },
                "end": {
                  "line": 131,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnReorderingMixin"
            },
            {
              "name": "_onTrackStart",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column-reordering-mixin.html",
                "start": {
                  "line": 133,
                  "column": 4
                },
                "end": {
                  "line": 158,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnReorderingMixin"
            },
            {
              "name": "_onTrack",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column-reordering-mixin.html",
                "start": {
                  "line": 160,
                  "column": 4
                },
                "end": {
                  "line": 179,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnReorderingMixin"
            },
            {
              "name": "_onTrackEnd",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column-reordering-mixin.html",
                "start": {
                  "line": 181,
                  "column": 4
                },
                "end": {
                  "line": 193,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnReorderingMixin"
            },
            {
              "name": "_cellFromPoint",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column-reordering-mixin.html",
                "start": {
                  "line": 195,
                  "column": 4
                },
                "end": {
                  "line": 211,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnReorderingMixin"
            },
            {
              "name": "_updateGhostPosition",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column-reordering-mixin.html",
                "start": {
                  "line": 213,
                  "column": 4
                },
                "end": {
                  "line": 224,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "eventClientX"
                },
                {
                  "name": "eventClientY"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnReorderingMixin"
            },
            {
              "name": "_updateGhost",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column-reordering-mixin.html",
                "start": {
                  "line": 226,
                  "column": 4
                },
                "end": {
                  "line": 235,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cell"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnReorderingMixin"
            },
            {
              "name": "_updateOrders",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column-reordering-mixin.html",
                "start": {
                  "line": 237,
                  "column": 4
                },
                "end": {
                  "line": 246,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "columnTree"
                },
                {
                  "name": "splices"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnReorderingMixin"
            },
            {
              "name": "_setSiblingsReorderStatus",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column-reordering-mixin.html",
                "start": {
                  "line": 248,
                  "column": 4
                },
                "end": {
                  "line": 254,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "column"
                },
                {
                  "name": "status"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnReorderingMixin"
            },
            {
              "name": "_autoScroller",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column-reordering-mixin.html",
                "start": {
                  "line": 256,
                  "column": 4
                },
                "end": {
                  "line": 272,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnReorderingMixin"
            },
            {
              "name": "_isSwapAllowed",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column-reordering-mixin.html",
                "start": {
                  "line": 274,
                  "column": 4
                },
                "end": {
                  "line": 281,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "column1"
                },
                {
                  "name": "column2"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnReorderingMixin"
            },
            {
              "name": "_isSwappableByPosition",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column-reordering-mixin.html",
                "start": {
                  "line": 283,
                  "column": 4
                },
                "end": {
                  "line": 294,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "targetColumn"
                },
                {
                  "name": "clientX"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnReorderingMixin"
            },
            {
              "name": "_swapColumnOrders",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column-reordering-mixin.html",
                "start": {
                  "line": 296,
                  "column": 4
                },
                "end": {
                  "line": 302,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "column1"
                },
                {
                  "name": "column2"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnReorderingMixin"
            },
            {
              "name": "_getTargetColumn",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column-reordering-mixin.html",
                "start": {
                  "line": 304,
                  "column": 4
                },
                "end": {
                  "line": 316,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "targetCell"
                },
                {
                  "name": "draggedColumn"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnReorderingMixin"
            },
            {
              "name": "_onHeaderTrack",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column-resizing-mixin.html",
                "start": {
                  "line": 58,
                  "column": 4
                },
                "end": {
                  "line": 106,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnResizingMixin"
            },
            {
              "name": "_createScrollerRows",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 151,
                  "column": 6
                },
                "end": {
                  "line": 169,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "count"
                }
              ]
            },
            {
              "name": "_getRowTarget",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 171,
                  "column": 6
                },
                "end": {
                  "line": 173,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_createCell",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 175,
                  "column": 6
                },
                "end": {
                  "line": 195,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "tagName"
                }
              ]
            },
            {
              "name": "_updateRow",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 197,
                  "column": 6
                },
                "end": {
                  "line": 281,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "row"
                },
                {
                  "name": "columns"
                },
                {
                  "name": "section"
                },
                {
                  "name": "isColumnRow"
                },
                {
                  "name": "noNotify"
                }
              ]
            },
            {
              "name": "_updateScrollerItem",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 283,
                  "column": 6
                },
                "end": {
                  "line": 295,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "row"
                },
                {
                  "name": "index"
                }
              ]
            },
            {
              "name": "_columnTreeChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 297,
                  "column": 6
                },
                "end": {
                  "line": 334,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "columnTree"
                },
                {
                  "name": "splices"
                }
              ]
            },
            {
              "name": "_updateItem",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 336,
                  "column": 6
                },
                "end": {
                  "line": 352,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "row"
                },
                {
                  "name": "item"
                }
              ]
            },
            {
              "name": "_resizeHandler",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 354,
                  "column": 6
                },
                "end": {
                  "line": 358,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_updateHeaderFooterMetrics",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 360,
                  "column": 6
                },
                "end": {
                  "line": 373,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_onAnimationEnd",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 375,
                  "column": 6
                },
                "end": {
                  "line": 381,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "name": "_toggleAttribute",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 383,
                  "column": 6
                },
                "end": {
                  "line": 389,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name"
                },
                {
                  "name": "bool"
                },
                {
                  "name": "node"
                }
              ]
            }
          ],
          "staticMethods": [
            {
              "name": "includeStyle",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/vaadin-themable-mixin/vaadin-themable-mixin.html",
                "start": {
                  "line": 40,
                  "column": 4
                },
                "end": {
                  "line": 44,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "moduleName"
                }
              ],
              "inheritedFrom": "Vaadin.ThemableMixin"
            }
          ],
          "demos": [
            {
              "url": "demo/index.html",
              "description": ""
            }
          ],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 401,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Vaadin.GridElement",
          "attributes": [
            {
              "name": "page-size",
              "description": "Number of items fetched at a time from the dataprovider.",
              "sourceRange": {
                "file": "vaadin-grid-data-provider-mixin.html",
                "start": {
                  "line": 70,
                  "column": 8
                },
                "end": {
                  "line": 74,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "Vaadin.Grid.DataProviderMixin"
            },
            {
              "name": "data-provider",
              "description": "Function that provides items lazily. Receives arguments `params`, `callback`\n\n`params.page` Requested page index\n\n`params.pageSize` Current page size\n\n`params.filters` Currently applied filters\n\n`params.sortOrders` Currently applied sorting orders",
              "sourceRange": {
                "file": "vaadin-grid-data-provider-mixin.html",
                "start": {
                  "line": 88,
                  "column": 8
                },
                "end": {
                  "line": 92,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "Vaadin.Grid.DataProviderMixin"
            },
            {
              "name": "items",
              "description": "An array containing the items which will be stamped to the column template\ninstances.",
              "sourceRange": {
                "file": "vaadin-grid-array-data-provider-mixin.html",
                "start": {
                  "line": 22,
                  "column": 8
                },
                "end": {
                  "line": 22,
                  "column": 20
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "Vaadin.Grid.ArrayDataProviderMixin"
            },
            {
              "name": "active-item",
              "description": "The item user has last interacted with. Turns to `null` after user deactivates\nthe item by re-interacting with the currently active item.",
              "sourceRange": {
                "file": "vaadin-grid-active-item-mixin.html",
                "start": {
                  "line": 21,
                  "column": 8
                },
                "end": {
                  "line": 25,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "Vaadin.Grid.ActiveItemMixin"
            },
            {
              "name": "ios",
              "description": "",
              "sourceRange": {
                "file": "vaadin-grid-scroll-mixin.html",
                "start": {
                  "line": 63,
                  "column": 8
                },
                "end": {
                  "line": 67,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ScrollMixin"
            },
            {
              "name": "fixed-sections",
              "description": "",
              "sourceRange": {
                "file": "vaadin-grid-scroll-mixin.html",
                "start": {
                  "line": 69,
                  "column": 8
                },
                "end": {
                  "line": 73,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ScrollMixin"
            },
            {
              "name": "scrolling",
              "description": "",
              "sourceRange": {
                "file": "vaadin-grid-scroll-mixin.html",
                "start": {
                  "line": 83,
                  "column": 8
                },
                "end": {
                  "line": 86,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ScrollMixin"
            },
            {
              "name": "selected-items",
              "description": "An array that contains the selected items.",
              "sourceRange": {
                "file": "vaadin-grid-selection-mixin.html",
                "start": {
                  "line": 20,
                  "column": 8
                },
                "end": {
                  "line": 24,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "Vaadin.Grid.SelectionMixin"
            },
            {
              "name": "multi-sort",
              "description": "When `true`, all `<vaadin-grid-sorter>` are applied for sorting.",
              "sourceRange": {
                "file": "vaadin-grid-sort-mixin.html",
                "start": {
                  "line": 19,
                  "column": 8
                },
                "end": {
                  "line": 22,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.SortMixin"
            },
            {
              "name": "expanded-items",
              "description": "An array containing references to expanded items.",
              "sourceRange": {
                "file": "vaadin-grid-row-details-mixin.html",
                "start": {
                  "line": 36,
                  "column": 8
                },
                "end": {
                  "line": 41,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "Array",
              "inheritedFrom": "Vaadin.Grid.RowDetailsMixin"
            },
            {
              "name": "interacting",
              "description": "",
              "sourceRange": {
                "file": "vaadin-grid-keyboard-navigation-mixin.html",
                "start": {
                  "line": 28,
                  "column": 8
                },
                "end": {
                  "line": 32,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.KeyboardNavigationMixin"
            },
            {
              "name": "navigating",
              "description": "",
              "sourceRange": {
                "file": "vaadin-grid-keyboard-navigation-mixin.html",
                "start": {
                  "line": 33,
                  "column": 8
                },
                "end": {
                  "line": 37,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.KeyboardNavigationMixin"
            },
            {
              "name": "column-reordering-allowed",
              "description": "Set to true to allow column reordering.",
              "sourceRange": {
                "file": "vaadin-grid-column-reordering-mixin.html",
                "start": {
                  "line": 51,
                  "column": 8
                },
                "end": {
                  "line": 54,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ColumnReorderingMixin"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [
            {
              "description": "",
              "name": "nodistribute",
              "range": {
                "file": "vaadin-grid.html",
                "start": {
                  "line": 50,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 37
                }
              }
            }
          ],
          "tagname": "vaadin-grid",
          "mixins": [
            "Vaadin.ThemableMixin",
            "Vaadin.Grid.DataProviderMixin",
            "Vaadin.Grid.ArrayDataProviderMixin",
            "Vaadin.Grid.DynamicColumnsMixin",
            "Vaadin.Grid.CellClickMixin",
            "Vaadin.Grid.ActiveItemMixin",
            "Vaadin.Grid.ScrollMixin",
            "Vaadin.Grid.SelectionMixin",
            "Vaadin.Grid.SortMixin",
            "Vaadin.Grid.RowDetailsMixin",
            "Vaadin.Grid.KeyboardNavigationMixin",
            "Vaadin.Grid.FilterMixin",
            "Vaadin.Grid.ColumnReorderingMixin",
            "Vaadin.Grid.ColumnResizingMixin"
          ]
        },
        {
          "description": "`vaadin-grid-selection-column` is a helper element for the `vaadin-grid` that provides default templates and functionality for the selection.\nWith it the user can select rows using checkboxes displayed in a column.\n\nWhen the grid is configured with an array of items as the data provider, it provides the feature of selecting all the items by clicking on the checkbox in the header.",
          "summary": "",
          "path": "vaadin-grid-selection-column.html",
          "properties": [
            {
              "name": "resizable",
              "type": "boolean",
              "description": "When set to true, the column is user-resizable.",
              "privacy": "public",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 24,
                  "column": 8
                },
                "end": {
                  "line": 38,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "headerTemplate",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 43,
                  "column": 8
                },
                "end": {
                  "line": 45,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "footerTemplate",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 50,
                  "column": 8
                },
                "end": {
                  "line": 52,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "frozen",
              "type": "boolean",
              "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
              "privacy": "public",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 58,
                  "column": 8
                },
                "end": {
                  "line": 61,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "hidden",
              "type": "boolean",
              "description": "When set to true, the cells for this column are hidden.",
              "privacy": "public",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 66,
                  "column": 8
                },
                "end": {
                  "line": 68,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_lastFrozen",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 70,
                  "column": 8
                },
                "end": {
                  "line": 73,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_order",
              "type": "number",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 75,
                  "column": 8
                },
                "end": {
                  "line": 75,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_reorderStatus",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 77,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_emptyCells",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 79,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 26
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_headerCell",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 81,
                  "column": 8
                },
                "end": {
                  "line": 81,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_footerCell",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 83,
                  "column": 8
                },
                "end": {
                  "line": 83,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_grid",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 85,
                  "column": 8
                },
                "end": {
                  "line": 85,
                  "column": 21
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            }
          ],
          "methods": [
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 154,
                  "column": 6
                },
                "end": {
                  "line": 162,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 127,
                  "column": 6
                },
                "end": {
                  "line": 151,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_prepareHeaderTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 102,
                  "column": 6
                },
                "end": {
                  "line": 108,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_prepareFooterTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 178,
                  "column": 4
                },
                "end": {
                  "line": 180,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_prepareBodyTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 110,
                  "column": 6
                },
                "end": {
                  "line": 116,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_prepareTemplatizer",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 186,
                  "column": 4
                },
                "end": {
                  "line": 197,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "instanceProps"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_emptyCellsChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 199,
                  "column": 4
                },
                "end": {
                  "line": 201,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "emptyCells"
                },
                {
                  "name": "splices"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_stampBodyTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 203,
                  "column": 4
                },
                "end": {
                  "line": 221,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_stampHeaderTemplate",
              "description": "TODO: DRY",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 224,
                  "column": 4
                },
                "end": {
                  "line": 233,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "headerTemplate"
                },
                {
                  "name": "headerCell"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_stampFooterTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 235,
                  "column": 4
                },
                "end": {
                  "line": 244,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "footerTemplate"
                },
                {
                  "name": "footerCell"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_selectFirstTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 246,
                  "column": 4
                },
                "end": {
                  "line": 250,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_findTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 252,
                  "column": 4
                },
                "end": {
                  "line": 261,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_headerTemplateChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 263,
                  "column": 4
                },
                "end": {
                  "line": 265,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "headerTemplate"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_footerTemplateChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 267,
                  "column": 4
                },
                "end": {
                  "line": 269,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "footerTemplate"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_flexGrowChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 271,
                  "column": 4
                },
                "end": {
                  "line": 277,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "flexGrow"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_orderChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 279,
                  "column": 4
                },
                "end": {
                  "line": 281,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "order"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_widthChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 283,
                  "column": 4
                },
                "end": {
                  "line": 289,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_frozenChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 291,
                  "column": 4
                },
                "end": {
                  "line": 299,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "frozen"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_lastFrozenChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 301,
                  "column": 4
                },
                "end": {
                  "line": 307,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "lastFrozen"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_toggleAttribute",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 309,
                  "column": 4
                },
                "end": {
                  "line": 315,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name"
                },
                {
                  "name": "on"
                },
                {
                  "name": "element"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_resizableChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 317,
                  "column": 4
                },
                "end": {
                  "line": 338,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "resizable"
                },
                {
                  "name": "headerCell"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_templateChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 409,
                  "column": 6
                },
                "end": {
                  "line": 418,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                }
              ],
              "inheritedFrom": "Vaadin.GridColumnElement"
            },
            {
              "name": "_hiddenChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 420,
                  "column": 6
                },
                "end": {
                  "line": 431,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hidden"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.GridColumnElement"
            },
            {
              "name": "_reorderStatusChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 433,
                  "column": 6
                },
                "end": {
                  "line": 435,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "reorderStatus"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.GridColumnElement"
            },
            {
              "name": "_onSelectAllChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 164,
                  "column": 6
                },
                "end": {
                  "line": 174,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selectAll"
                }
              ]
            },
            {
              "name": "_arrayContains",
              "description": "We need this when sorting or to preserve selection after filtering.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 178,
                  "column": 6
                },
                "end": {
                  "line": 181,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "a"
                },
                {
                  "name": "b"
                }
              ]
            },
            {
              "name": "_onSelectAll",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 183,
                  "column": 6
                },
                "end": {
                  "line": 185,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "name": "_isChecked",
              "description": "iOS needs indeterminated + checked at the same time",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 188,
                  "column": 6
                },
                "end": {
                  "line": 190,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selectAll"
                },
                {
                  "name": "indeterminate"
                }
              ]
            },
            {
              "name": "_onActiveItemChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 192,
                  "column": 6
                },
                "end": {
                  "line": 201,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "name": "_onSelectedItemsChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 203,
                  "column": 6
                },
                "end": {
                  "line": 218,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "name": "_onDataProviderChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 220,
                  "column": 6
                },
                "end": {
                  "line": 222,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 4
            },
            "end": {
              "line": 223,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Vaadin.GridSelectionColumnElement",
          "attributes": [
            {
              "name": "resizable",
              "description": "When set to true, the column is user-resizable.",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 24,
                  "column": 8
                },
                "end": {
                  "line": 38,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "frozen",
              "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 58,
                  "column": 8
                },
                "end": {
                  "line": 61,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "hidden",
              "description": "When set to true, the cells for this column are hidden.",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 66,
                  "column": 8
                },
                "end": {
                  "line": 68,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "vaadin-grid-selection-column",
          "mixins": [
            "Vaadin.GridColumnElement"
          ]
        },
        {
          "description": "`vaadin-grid-sorter` is a helper element for the `vaadin-grid` that provides out-of-the-box UI controls,\nvisual feedback, and handlers for sorting the grid data.\n\n### Styling\n\nThe following shadow DOM parts are exposed for styling:\n\nPart name | Description\n----------------|----------------\n`sorter-indicators` | The internal sorter indicators. With ::before selector it is possible to customize the arrow\n`sorter-order` | The internal sorter order",
          "summary": "",
          "path": "vaadin-grid-sorter.html",
          "properties": [
            {
              "name": "__serializing",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 123,
                  "column": 8
                },
                "end": {
                  "line": 123,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "__dataCounter",
              "type": "number",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1151,
                  "column": 8
                },
                "end": {
                  "line": 1151,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataEnabled",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 127,
                  "column": 8
                },
                "end": {
                  "line": 127,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "__dataReady",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 129,
                  "column": 8
                },
                "end": {
                  "line": 129,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "__dataInvalid",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 131,
                  "column": 8
                },
                "end": {
                  "line": 131,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "__data",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1133,
                  "column": 8
                },
                "end": {
                  "line": 1133,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPending",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1135,
                  "column": 8
                },
                "end": {
                  "line": 1135,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataOld",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1137,
                  "column": 8
                },
                "end": {
                  "line": 1137,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataProto",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 139,
                  "column": 8
                },
                "end": {
                  "line": 139,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "__dataHasAccessor",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 141,
                  "column": 8
                },
                "end": {
                  "line": 141,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "__dataInstanceProps",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 143,
                  "column": 8
                },
                "end": {
                  "line": 143,
                  "column": 33
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "__dataClientsReady",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1115,
                  "column": 8
                },
                "end": {
                  "line": 1115,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPendingClients",
              "type": "Array",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1117,
                  "column": 8
                },
                "end": {
                  "line": 1117,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataToNotify",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1119,
                  "column": 8
                },
                "end": {
                  "line": 1119,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataLinkedPaths",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1121,
                  "column": 8
                },
                "end": {
                  "line": 1121,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHasPaths",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1123,
                  "column": 8
                },
                "end": {
                  "line": 1123,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataCompoundStorage",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1125,
                  "column": 8
                },
                "end": {
                  "line": 1125,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHost",
              "type": "Polymer_PropertyEffects",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1127,
                  "column": 8
                },
                "end": {
                  "line": 1127,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataTemp",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1129,
                  "column": 8
                },
                "end": {
                  "line": 1129,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataClientsInitialized",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1131,
                  "column": 8
                },
                "end": {
                  "line": 1131,
                  "column": 38
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__computeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1139,
                  "column": 8
                },
                "end": {
                  "line": 1139,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__reflectEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1141,
                  "column": 8
                },
                "end": {
                  "line": 1141,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__notifyEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1143,
                  "column": 8
                },
                "end": {
                  "line": 1143,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__propagateEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1145,
                  "column": 8
                },
                "end": {
                  "line": 1145,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__observeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1147,
                  "column": 8
                },
                "end": {
                  "line": 1147,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__readOnly",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1149,
                  "column": 8
                },
                "end": {
                  "line": 1149,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__templateInfo",
              "type": "!TemplateInfo",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1153,
                  "column": 8
                },
                "end": {
                  "line": 1153,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "path",
              "type": "string",
              "description": "JS Path of the property in the item used for sorting the data.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 112,
                  "column": 12
                },
                "end": {
                  "line": 112,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "direction",
              "type": "string",
              "description": "How to sort the data.\nPossible values are `asc` to use an ascending algorithm, `desc` to sort the data in\ndescending direction, or `null` for not sorting the data.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 119,
                  "column": 12
                },
                "end": {
                  "line": 124,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "null"
            },
            {
              "name": "_order",
              "type": "number",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 126,
                  "column": 12
                },
                "end": {
                  "line": 129,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "null"
            },
            {
              "name": "_cellHasFocus",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 131,
                  "column": 12
                },
                "end": {
                  "line": 134,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "_isConnected",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 136,
                  "column": 12
                },
                "end": {
                  "line": 139,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "_boundOnCellContentFocusin",
              "type": "Function",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 141,
                  "column": 12
                },
                "end": {
                  "line": 146,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_boundOnCellContentFocusout",
              "type": "Function",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 148,
                  "column": 12
                },
                "end": {
                  "line": 153,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "_stampTemplate",
              "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2319,
                  "column": 6
                },
                "end": {
                  "line": 2344,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to stamp"
                }
              ],
              "return": {
                "type": "!StampedTemplate",
                "desc": "Cloned template content"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addMethodEventListenerToNode",
              "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 447,
                  "column": 6
                },
                "end": {
                  "line": 452,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to add listener on"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of method"
                },
                {
                  "name": "context",
                  "type": "*=",
                  "description": "Context the method will be called on (defaults\n  to `node`)"
                }
              ],
              "return": {
                "type": "Function",
                "desc": "Generated handler function"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_addEventListenerToNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 461,
                  "column": 6
                },
                "end": {
                  "line": 463,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to add event listener to"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "Function",
                  "description": "Listener function to add"
                }
              ],
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_removeEventListenerFromNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 472,
                  "column": 6
                },
                "end": {
                  "line": 474,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to remove event listener from"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "Function",
                  "description": "Listener function to remove"
                }
              ],
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "attributeChangedCallback",
              "description": "Provides a default implementation of the standard Custom Elements\n`attributeChangedCallback`.\n\nBy default, attributes declared in `properties` metadata are\ndeserialized using their `type` information to properties of the\nsame name.  \"Dash-cased\" attributes are deserialzed to \"camelCase\"\nproperties.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 699,
                  "column": 6
                },
                "end": {
                  "line": 707,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute."
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old value of attribute."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Current value of attribute."
                }
              ],
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeProperties",
              "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 557,
                  "column": 6
                },
                "end": {
                  "line": 597,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeProtoProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1183,
                  "column": 6
                },
                "end": {
                  "line": 1187,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the prototype"
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n`_setProperty`'s `shouldNotify: true`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1196,
                  "column": 6
                },
                "end": {
                  "line": 1205,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the instance"
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_ensureAttribute",
              "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 236,
                  "column": 6
                },
                "end": {
                  "line": 240,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to ensure is set."
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "of the attribute."
                }
              ],
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 252,
                  "column": 6
                },
                "end": {
                  "line": 258,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to."
                }
              ],
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 267,
                  "column": 6
                },
                "end": {
                  "line": 273,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 287,
                  "column": 6
                },
                "end": {
                  "line": 294,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_serializeValue",
              "description": "Converts a typed JavaScript value to a string.\n\nThis method is called by Polymer when setting JS property values to\nHTML attributes.  Users may override this method on Polymer element\nprototypes to provide serialization for custom types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 306,
                  "column": 6
                },
                "end": {
                  "line": 326,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string|undefined)",
                "desc": "String serialized from the provided property value."
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called by Polymer when reading HTML attribute values to\nJS properties.  Users may override this method on Polymer element\nprototypes to provide deserialization for custom `type`s.  Note,\nthe `type` argument is the value of the `type` field provided in the\n`properties` configuration object for a given property, and is\nby convention the constructor for the type to deserialize.\n\nNote: The return value of `undefined` is used as a sentinel value to\nindicate the attribute should be removed.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 345,
                  "column": 6
                },
                "end": {
                  "line": 387,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Attribute value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.  When calling on\na prototype, any overwritten values are saved in `__dataProto`,\nand it is up to the subclasser to decide how/when to set those\nproperties back into the accessor.  When calling on an instance,\nthe overwritten value is set via `_setPendingProperty`, and the\nuser should call `_invalidateProperties` or `_flushProperties`\nfor the values to take effect.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 411,
                  "column": 6
                },
                "end": {
                  "line": 431,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_hasAccessor",
              "description": "Returns true if this library created an accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 439,
                  "column": 6
                },
                "end": {
                  "line": 441,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if an accessor was created"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_setProperty",
              "description": "Overrides base implementation to ensure all accessors set `shouldNotify`\nto true, for per-property notification tracking.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1472,
                  "column": 6
                },
                "end": {
                  "line": 1476,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property"
                },
                {
                  "name": "value"
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setPendingProperty",
              "description": "Overrides the `PropertyAccessors` implementation to introduce special\ndirty check logic depending on the property & value being set:\n\n1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n   Stored in `__dataTemp`, dirty checked against `__dataTemp`\n2. Object set to simple property (e.g. 'prop': {...})\n   Stored in `__dataTemp` and `__data`, dirty checked against\n   `__dataTemp` by default implementation of `_shouldPropertyChange`\n3. Primitive value set to simple property (e.g. 'prop': 42)\n   Stored in `__data`, dirty checked against `__data`\n\nThe dirty-check is important to prevent cycles due to two-way\nnotification, but paths and objects are only dirty checked against any\nprevious value set during this turn via a \"temporary cache\" that is\ncleared when the last `_propertiesChaged` exits. This is so:\na. any cached array paths (e.g. 'array.3.prop') may be invalidated\n   due to array mutations like shift/unshift/splice; this is fine\n   since path changes are dirty-checked at user entry points like `set`\nb. dirty-checking for objects only lasts one turn to allow the user\n   to mutate the object in-place and re-set it with the same identity\n   and have all sub-properties re-propagated in a subsequent turn.\n\nThe temp cache is not necessarily sufficient to prevent invalid array\npaths, since a splice can happen during the same turn (with pathological\nuser code); we could introduce a \"fixup\" for temporarily cached array\npaths if needed: https://github.com/Polymer/polymer/issues/4227",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1435,
                  "column": 6
                },
                "end": {
                  "line": 1464,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "True if property should fire notification\n  event (applies only for `notify: true` properties)"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_isPropertyPending",
              "description": "Returns true if the specified property has a pending change.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 493,
                  "column": 6
                },
                "end": {
                  "line": 495,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if property has a pending change"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_invalidateProperties",
              "description": "Overrides `PropertyAccessor`'s default async queuing of\n`_propertiesChanged`: if `__dataReady` is false (has not yet been\nmanually flushed), the function no-ops; otherwise flushes\n`_propertiesChanged` synchronously.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1486,
                  "column": 6
                },
                "end": {
                  "line": 1490,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 523,
                  "column": 6
                },
                "end": {
                  "line": 532,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_flushProperties",
              "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 543,
                  "column": 6
                },
                "end": {
                  "line": 551,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 165,
                  "column": 8
                },
                "end": {
                  "line": 168,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_propertiesChanged",
              "description": "Implements `PropertyAccessors`'s properties changed callback.\n\nRuns each class of effects for the batch of changed properties in\na specific order (compute, propagate, reflect, observe, notify).",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1625,
                  "column": 6
                },
                "end": {
                  "line": 1658,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps"
                },
                {
                  "name": "changedProps"
                },
                {
                  "name": "oldProps"
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` for primitive types if a\nstrict equality check fails, and returns `true` for all Object/Arrays.\nThe method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 606,
                  "column": 6
                },
                "end": {
                  "line": 613,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_addPropertyEffect",
              "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1219,
                  "column": 6
                },
                "end": {
                  "line": 1227,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removePropertyEffect",
              "description": "Removes the given property effect.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1236,
                  "column": 6
                },
                "end": {
                  "line": 1242,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property the effect was associated with"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object to remove"
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasPropertyEffect",
              "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1253,
                  "column": 6
                },
                "end": {
                  "line": 1256,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "type",
                  "type": "string=",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReadOnlyEffect",
              "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1266,
                  "column": 6
                },
                "end": {
                  "line": 1268,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasNotifyEffect",
              "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1278,
                  "column": 6
                },
                "end": {
                  "line": 1280,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReflectEffect",
              "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1290,
                  "column": 6
                },
                "end": {
                  "line": 1292,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasComputedEffect",
              "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1302,
                  "column": 6
                },
                "end": {
                  "line": 1304,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setPendingPropertyOrPath",
              "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1336,
                  "column": 6
                },
                "end": {
                  "line": 1368,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(number|string)>)",
                  "description": "Path to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "Set to true if this change should\n cause a property notification event dispatch"
                },
                {
                  "name": "isPathNotification",
                  "type": "boolean=",
                  "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setUnmanagedPropertyToNode",
              "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1390,
                  "column": 6
                },
                "end": {
                  "line": 1398,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "The node to set a property on"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "The property to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "The value to set"
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_enqueueClient",
              "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1500,
                  "column": 6
                },
                "end": {
                  "line": 1505,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "client",
                  "type": "Object",
                  "description": "PropertyEffects client to enqueue"
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_flushClients",
              "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1513,
                  "column": 6
                },
                "end": {
                  "line": 1524,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__enableOrFlushClients",
              "description": "(c) the stamped dom enables.",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1538,
                  "column": 6
                },
                "end": {
                  "line": 1551,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_readyClients",
              "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 644,
                  "column": 6
                },
                "end": {
                  "line": 653,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "setProperties",
              "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1578,
                  "column": 6
                },
                "end": {
                  "line": 1589,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
                },
                {
                  "name": "setReadOnly",
                  "type": "boolean=",
                  "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_propagatePropertyChanges",
              "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1669,
                  "column": 6
                },
                "end": {
                  "line": 1679,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changedProps",
                  "type": "Object",
                  "description": "Bag of changed properties"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "linkPaths",
              "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1689,
                  "column": 6
                },
                "end": {
                  "line": 1694,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "to",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Target path to link."
                },
                {
                  "name": "from",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Source path to link."
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unlinkPaths",
              "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1705,
                  "column": 6
                },
                "end": {
                  "line": 1710,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Target path to unlink."
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifySplices",
              "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, obect: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1741,
                  "column": 6
                },
                "end": {
                  "line": 1745,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "splices",
                  "type": "Array",
                  "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "get",
              "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1766,
                  "column": 6
                },
                "end": {
                  "line": 1768,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "set",
              "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1790,
                  "column": 6
                },
                "end": {
                  "line": 1800,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set at the specified path."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "push",
              "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1816,
                  "column": 6
                },
                "end": {
                  "line": 1825,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path to array."
                },
                {
                  "name": "...items"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "pop",
              "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1840,
                  "column": 6
                },
                "end": {
                  "line": 1849,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "splice",
              "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1868,
                  "column": 6
                },
                "end": {
                  "line": 1885,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path to array."
                },
                {
                  "name": "start",
                  "type": "number",
                  "description": "Index from which to start removing/inserting."
                },
                {
                  "name": "deleteCount",
                  "type": "number",
                  "description": "Number of items to remove."
                },
                {
                  "name": "...items"
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Array of removed items."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "shift",
              "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1900,
                  "column": 6
                },
                "end": {
                  "line": 1909,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unshift",
              "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1925,
                  "column": 6
                },
                "end": {
                  "line": 1933,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path to array."
                },
                {
                  "name": "...items"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifyPath",
              "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1947,
                  "column": 6
                },
                "end": {
                  "line": 1964,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Value at the path (optional)."
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReadOnlyProperty",
              "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1976,
                  "column": 6
                },
                "end": {
                  "line": 1983,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createPropertyObserver",
              "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1996,
                  "column": 6
                },
                "end": {
                  "line": 2006,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createMethodObserver",
              "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2018,
                  "column": 6
                },
                "end": {
                  "line": 2024,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createNotifyingProperty",
              "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2034,
                  "column": 6
                },
                "end": {
                  "line": 2042,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReflectedProperty",
              "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2052,
                  "column": 6
                },
                "end": {
                  "line": 2065,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createComputedProperty",
              "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2078,
                  "column": 6
                },
                "end": {
                  "line": 2084,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_bindTemplate",
              "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2254,
                  "column": 6
                },
                "end": {
                  "line": 2277,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                },
                {
                  "name": "instanceBinding",
                  "type": "boolean=",
                  "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removeBoundDom",
              "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2354,
                  "column": 6
                },
                "end": {
                  "line": 2375,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "!StampedTemplate",
                  "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 170,
                  "column": 8
                },
                "end": {
                  "line": 178,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 180,
                  "column": 8
                },
                "end": {
                  "line": 188,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_attachDom",
              "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 667,
                  "column": 6
                },
                "end": {
                  "line": 683,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "NodeList",
                  "description": "to attach to the element."
                }
              ],
              "return": {
                "type": "Node",
                "desc": "node to which the dom has been attached."
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "updateStyles",
              "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 726,
                  "column": 6
                },
                "end": {
                  "line": 730,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "properties",
                  "type": "Object=",
                  "description": "Bag of custom property key/values to\n  apply to this element."
                }
              ],
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "resolveUrl",
              "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 743,
                  "column": 6
                },
                "end": {
                  "line": 748,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "url",
                  "type": "string",
                  "description": "URL to resolve."
                },
                {
                  "name": "base",
                  "type": "string=",
                  "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Rewritten URL relative to base"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_onContentFocus",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 190,
                  "column": 8
                },
                "end": {
                  "line": 200,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "name": "_getClosestCellContent",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 202,
                  "column": 8
                },
                "end": {
                  "line": 214,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_onCellContentFocusin",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 216,
                  "column": 8
                },
                "end": {
                  "line": 218,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_onCellContentFocusout",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 220,
                  "column": 8
                },
                "end": {
                  "line": 222,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_pathOrDirectionChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 224,
                  "column": 8
                },
                "end": {
                  "line": 232,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "direction"
                },
                {
                  "name": "isConnected"
                }
              ]
            },
            {
              "name": "_getDisplayOrder",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 234,
                  "column": 8
                },
                "end": {
                  "line": 236,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "order"
                }
              ]
            },
            {
              "name": "_onClick",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 238,
                  "column": 8
                },
                "end": {
                  "line": 247,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "name": "_getAriaLabel",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 249,
                  "column": 8
                },
                "end": {
                  "line": 258,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "direction"
                },
                {
                  "name": "order"
                }
              ]
            },
            {
              "name": "_directionOrOrderChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 260,
                  "column": 8
                },
                "end": {
                  "line": 284,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "direction"
                },
                {
                  "name": "order"
                }
              ]
            },
            {
              "name": "_cellHasFocusChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 286,
                  "column": 8
                },
                "end": {
                  "line": 299,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cellHasFocus"
                }
              ]
            }
          ],
          "staticMethods": [
            {
              "name": "_parseTemplate",
              "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 197,
                  "column": 6
                },
                "end": {
                  "line": 208,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to parse"
                },
                {
                  "name": "outerTemplateInfo",
                  "type": "TemplateInfo=",
                  "description": "Template metadata from the outer\n  template, for parsing nested templates"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Parsed template metadata"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateContent",
              "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 759,
                  "column": 6
                },
                "end": {
                  "line": 762,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "templateInfo"
                },
                {
                  "name": "nodeInfo"
                }
              ],
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_parseTemplateNode",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2394,
                  "column": 6
                },
                "end": {
                  "line": 2408,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateChildNodes",
              "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 257,
                  "column": 6
                },
                "end": {
                  "line": 291,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "root",
                  "type": "Node",
                  "description": "Root node whose `childNodes` will be parsed"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNestedTemplate",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2479,
                  "column": 6
                },
                "end": {
                  "line": 2489,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateNodeAttributes",
              "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 329,
                  "column": 6
                },
                "end": {
                  "line": 338,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNodeAttribute",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2427,
                  "column": 6
                },
                "end": {
                  "line": 2463,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                },
                {
                  "name": "name"
                },
                {
                  "name": "value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_contentForTemplate",
              "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 384,
                  "column": 6
                },
                "end": {
                  "line": 387,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template to retrieve `content` for"
                }
              ],
              "return": {
                "type": "DocumentFragment",
                "desc": "Content fragment"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "createPropertiesForAttributes",
              "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 113,
                  "column": 6
                },
                "end": {
                  "line": 118,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "addPropertyEffect",
              "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n  {\n    fn: effectFunction, // Reference to function to call to perform effect\n    info: { ... }       // Effect metadata passed to function\n    trigger: {          // Optional triggering metadata; if not provided\n      name: string      // the property is treated as a wildcard\n      structured: boolean\n      wildcard: boolean\n    }\n  }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n  effectFunction(inst, path, props, oldProps, info, hasPaths)",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2123,
                  "column": 6
                },
                "end": {
                  "line": 2125,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createPropertyObserver",
              "description": "Creates a single-property observer for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2136,
                  "column": 6
                },
                "end": {
                  "line": 2138,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createMethodObserver",
              "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal Javascript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2152,
                  "column": 6
                },
                "end": {
                  "line": 2154,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createNotifyingProperty",
              "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2163,
                  "column": 6
                },
                "end": {
                  "line": 2165,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReadOnlyProperty",
              "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2182,
                  "column": 6
                },
                "end": {
                  "line": 2184,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReflectedProperty",
              "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2193,
                  "column": 6
                },
                "end": {
                  "line": 2195,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createComputedProperty",
              "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal Javascript function signature:\n`'methodName(arg1, [..., argn])'`",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2210,
                  "column": 6
                },
                "end": {
                  "line": 2212,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "bindTemplate",
              "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2226,
                  "column": 6
                },
                "end": {
                  "line": 2228,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                }
              ],
              "return": {
                "type": "Object",
                "desc": "Template metadata object"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addTemplatePropertyEffect",
              "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2291,
                  "column": 6
                },
                "end": {
                  "line": 2297,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Template metadata to add effect to"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseBindings",
              "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2524,
                  "column": 6
                },
                "end": {
                  "line": 2589,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "Text to parse from attribute or textContent"
                },
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Current template metadata"
                }
              ],
              "return": {
                "type": "Array.<!BindingPart>",
                "desc": "Array of binding part metadata"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_evaluateBinding",
              "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2605,
                  "column": 6
                },
                "end": {
                  "line": 2622,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "inst",
                  "type": "this",
                  "description": "Element that should be used as scope for\n  binding dependencies"
                },
                {
                  "name": "part",
                  "type": "BindingPart",
                  "description": "Binding part metadata"
                },
                {
                  "name": "path",
                  "type": "string",
                  "description": "Property/path that triggered this effect"
                },
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of current property changes"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value the binding part evaluated to"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "finalize",
              "description": "Called automatically when the first element instance is created to\nensure that class finalization work has been completed.\nMay be called by users to eagerly perform class finalization work\nprior to the creation of the first element instance.\n\nClass finalization work generally includes meta-programming such as\ncreating property accessors and any property effect metadata needed for\nthe features used.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 471,
                  "column": 6
                },
                "end": {
                  "line": 475,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.ElementMixin"
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 6
            },
            "end": {
              "line": 300,
              "column": 7
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Vaadin.GridSorterElement",
          "attributes": [
            {
              "name": "path",
              "description": "JS Path of the property in the item used for sorting the data.",
              "sourceRange": {
                "start": {
                  "line": 112,
                  "column": 12
                },
                "end": {
                  "line": 112,
                  "column": 24
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "direction",
              "description": "How to sort the data.\nPossible values are `asc` to use an ascending algorithm, `desc` to sort the data in\ndescending direction, or `null` for not sorting the data.",
              "sourceRange": {
                "start": {
                  "line": 119,
                  "column": 12
                },
                "end": {
                  "line": 124,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "direction-changed",
              "description": "Fired when the `direction` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [
            {
              "description": "",
              "name": "",
              "range": {
                "file": "vaadin-grid-sorter.html",
                "start": {
                  "line": 74,
                  "column": 6
                },
                "end": {
                  "line": 74,
                  "column": 19
                }
              }
            }
          ],
          "tagname": "vaadin-grid-sorter"
        },
        {
          "description": "",
          "summary": "",
          "path": "vaadin-grid-column-group.html",
          "properties": [
            {
              "name": "resizable",
              "type": "boolean",
              "description": "When set to true, the column is user-resizable.",
              "privacy": "public",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 24,
                  "column": 8
                },
                "end": {
                  "line": 38,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "headerTemplate",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 43,
                  "column": 8
                },
                "end": {
                  "line": 45,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "footerTemplate",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 50,
                  "column": 8
                },
                "end": {
                  "line": 52,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "frozen",
              "type": "boolean",
              "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
              "privacy": "public",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 58,
                  "column": 8
                },
                "end": {
                  "line": 61,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "hidden",
              "type": "boolean",
              "description": "When set to true, the cells for this column are hidden.",
              "privacy": "public",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 66,
                  "column": 8
                },
                "end": {
                  "line": 68,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_lastFrozen",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 70,
                  "column": 8
                },
                "end": {
                  "line": 73,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_order",
              "type": "number",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 75,
                  "column": 8
                },
                "end": {
                  "line": 75,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_reorderStatus",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 77,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_emptyCells",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 79,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 26
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_headerCell",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 81,
                  "column": 8
                },
                "end": {
                  "line": 81,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_footerCell",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 83,
                  "column": 8
                },
                "end": {
                  "line": 83,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_grid",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 85,
                  "column": 8
                },
                "end": {
                  "line": 85,
                  "column": 21
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            }
          ],
          "methods": [
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 81,
                  "column": 8
                },
                "end": {
                  "line": 85,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 126,
                  "column": 4
                },
                "end": {
                  "line": 138,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_prepareHeaderTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 174,
                  "column": 4
                },
                "end": {
                  "line": 176,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_prepareFooterTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 178,
                  "column": 4
                },
                "end": {
                  "line": 180,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_prepareBodyTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 182,
                  "column": 4
                },
                "end": {
                  "line": 184,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_prepareTemplatizer",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 186,
                  "column": 4
                },
                "end": {
                  "line": 197,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "instanceProps"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_emptyCellsChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 199,
                  "column": 4
                },
                "end": {
                  "line": 201,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "emptyCells"
                },
                {
                  "name": "splices"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_stampBodyTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 203,
                  "column": 4
                },
                "end": {
                  "line": 221,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_stampHeaderTemplate",
              "description": "TODO: DRY",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 224,
                  "column": 4
                },
                "end": {
                  "line": 233,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "headerTemplate"
                },
                {
                  "name": "headerCell"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_stampFooterTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 235,
                  "column": 4
                },
                "end": {
                  "line": 244,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "footerTemplate"
                },
                {
                  "name": "footerCell"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_selectFirstTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 246,
                  "column": 4
                },
                "end": {
                  "line": 250,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_findTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 252,
                  "column": 4
                },
                "end": {
                  "line": 261,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_headerTemplateChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 263,
                  "column": 4
                },
                "end": {
                  "line": 265,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "headerTemplate"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_footerTemplateChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 267,
                  "column": 4
                },
                "end": {
                  "line": 269,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "footerTemplate"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_flexGrowChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 271,
                  "column": 4
                },
                "end": {
                  "line": 277,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "flexGrow"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_orderChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 279,
                  "column": 4
                },
                "end": {
                  "line": 281,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "order"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_widthChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 283,
                  "column": 4
                },
                "end": {
                  "line": 289,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_frozenChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 291,
                  "column": 4
                },
                "end": {
                  "line": 299,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "frozen"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_lastFrozenChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 301,
                  "column": 4
                },
                "end": {
                  "line": 307,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "lastFrozen"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_toggleAttribute",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 309,
                  "column": 4
                },
                "end": {
                  "line": 315,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name"
                },
                {
                  "name": "on"
                },
                {
                  "name": "element"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_resizableChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 317,
                  "column": 4
                },
                "end": {
                  "line": 338,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "resizable"
                },
                {
                  "name": "headerCell"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "detached",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 87,
                  "column": 8
                },
                "end": {
                  "line": 91,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_columnPropChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 93,
                  "column": 8
                },
                "end": {
                  "line": 113,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "value"
                }
              ]
            },
            {
              "name": "_groupOrderChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 115,
                  "column": 8
                },
                "end": {
                  "line": 146,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "order"
                },
                {
                  "name": "rootColumns"
                }
              ]
            },
            {
              "name": "_groupReorderStatusChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 148,
                  "column": 8
                },
                "end": {
                  "line": 158,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "reorderStatus"
                },
                {
                  "name": "rootColumns"
                }
              ]
            },
            {
              "name": "_groupResizableChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 160,
                  "column": 8
                },
                "end": {
                  "line": 170,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "resizable"
                },
                {
                  "name": "rootColumns"
                }
              ]
            },
            {
              "name": "_updateVisibleChildColumns",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 172,
                  "column": 8
                },
                "end": {
                  "line": 176,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "childColumns"
                }
              ]
            },
            {
              "name": "_childColumnsChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 178,
                  "column": 8
                },
                "end": {
                  "line": 186,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "childColumns"
                }
              ]
            },
            {
              "name": "_updateFlexAndWidth",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 188,
                  "column": 8
                },
                "end": {
                  "line": 204,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_groupFrozenChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 206,
                  "column": 8
                },
                "end": {
                  "line": 217,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "frozen"
                },
                {
                  "name": "rootColumns"
                }
              ]
            },
            {
              "name": "_groupHiddenChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 219,
                  "column": 8
                },
                "end": {
                  "line": 229,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hidden"
                },
                {
                  "name": "rootColumns"
                }
              ]
            },
            {
              "name": "_visibleChildColumnsChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 231,
                  "column": 8
                },
                "end": {
                  "line": 241,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "visibleChildColumns"
                }
              ]
            },
            {
              "name": "_colSpanChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 243,
                  "column": 8
                },
                "end": {
                  "line": 251,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "colSpan"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                }
              ]
            },
            {
              "name": "_getChildColumns",
              "description": "TODO: Refactor the duplicate methods with DynamicColumnsBehavior.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 255,
                  "column": 8
                },
                "end": {
                  "line": 259,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "el"
                }
              ]
            },
            {
              "name": "_addNodeObserver",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 261,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 16,
              "column": 6
            },
            "end": {
              "line": 281,
              "column": 7
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Vaadin.GridColumnGroupElement",
          "attributes": [
            {
              "name": "resizable",
              "description": "When set to true, the column is user-resizable.",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 24,
                  "column": 8
                },
                "end": {
                  "line": 38,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "frozen",
              "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 58,
                  "column": 8
                },
                "end": {
                  "line": 61,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "hidden",
              "description": "When set to true, the cells for this column are hidden.",
              "sourceRange": {
                "file": "vaadin-grid-column.html",
                "start": {
                  "line": 66,
                  "column": 8
                },
                "end": {
                  "line": 68,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "vaadin-grid-column-group",
          "mixins": [
            "Vaadin.Grid.ColumnBaseMixin"
          ]
        }
      ]
    }
  ],
  "elements": [
    {
      "description": "",
      "summary": "",
      "path": "vaadin-grid-templatizer.html",
      "properties": [
        {
          "name": "dataHost",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 18,
              "column": 6
            },
            "end": {
              "line": 18,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "template",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 19,
              "column": 6
            },
            "end": {
              "line": 19,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_templateInstances",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 6
            },
            "end": {
              "line": 26,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        },
        {
          "name": "_parentPathValues",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 32,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "_grid",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 6
            },
            "end": {
              "line": 34,
              "column": 19
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "templatize",
          "description": "Generates an anonymous `TemplateInstance` class (stored as `this.ctor`)\nfor the provided template.  This method should be called once per\ntemplate to prepare an element for stamping the template, followed\nby `stamp` to create new instances of the template.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/legacy/templatizer-behavior.html",
            "start": {
              "line": 105,
              "column": 6
            },
            "end": {
              "line": 114,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template to prepare"
            },
            {
              "name": "mutableData",
              "type": "boolean=",
              "description": "When `true`, the generated class will skip\n  strict dirty-checking for objects and arrays (always consider them to\n  be \"dirty\"). Defaults to false."
            }
          ],
          "inheritedFrom": "Polymer.Templatizer"
        },
        {
          "name": "stamp",
          "description": "Creates an instance of the template prepared by `templatize`.  The object\nreturned is an instance of the anonymous class generated by `templatize`\nwhose `root` property is a document fragment containing newly cloned\ntemplate content, and which has property accessors corresponding to\nproperties referenced in template bindings.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/legacy/templatizer-behavior.html",
            "start": {
              "line": 129,
              "column": 6
            },
            "end": {
              "line": 131,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "model",
              "type": "Object=",
              "description": "Object containing initial property values to\n  populate into the template bindings."
            }
          ],
          "return": {
            "type": "TemplateInstanceBase",
            "desc": "Returns the created instance of\nthe template prepared by `templatize`."
          },
          "inheritedFrom": "Polymer.Templatizer"
        },
        {
          "name": "modelForElement",
          "description": "Returns the template \"model\" (`TemplateInstance`) associated with\na given element, which serves as the binding scope for the template\ninstance the element is contained in.  A template model should be used\nto manipulate data associated with this template instance.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/legacy/templatizer-behavior.html",
            "start": {
              "line": 144,
              "column": 6
            },
            "end": {
              "line": 146,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "el",
              "type": "HTMLElement",
              "description": "Element for which to return a template model."
            }
          ],
          "return": {
            "type": "TemplateInstanceBase",
            "desc": "Model representing the binding scope for\n  the element."
          },
          "inheritedFrom": "Polymer.Templatizer"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 4
            },
            "end": {
              "line": 51,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "createInstance",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "addInstance",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 61,
              "column": 4
            },
            "end": {
              "line": 66,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance"
            }
          ]
        },
        {
          "name": "removeInstance",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 68,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance"
            }
          ]
        },
        {
          "name": "_ensureTemplatized",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 4
            },
            "end": {
              "line": 83,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_notifyInstancePropV2",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 85,
              "column": 4
            },
            "end": {
              "line": 112,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inst"
            },
            {
              "name": "prop"
            },
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_forwardParentProp",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 4
            },
            "end": {
              "line": 119,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop"
            },
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_forwardParentPath",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 4
            },
            "end": {
              "line": 126,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path"
            },
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_forwardHostPropV2",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 4
            },
            "end": {
              "line": 138,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop"
            },
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_templateInstancesChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 4
            },
            "end": {
              "line": 158,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "t"
            },
            {
              "name": "p"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 45
        },
        "end": {
          "line": 160,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "vaadin.elements.grid.Templatizer",
      "attributes": [
        {
          "name": "data-host",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 18,
              "column": 6
            },
            "end": {
              "line": 18,
              "column": 22
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "template",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 19,
              "column": 6
            },
            "end": {
              "line": 19,
              "column": 22
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "vaadin-grid-templatizer"
    },
    {
      "description": "",
      "summary": "",
      "path": "vaadin-grid-outer-scroller.html",
      "properties": [
        {
          "name": "__serializing",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 123,
              "column": 8
            },
            "end": {
              "line": 123,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataCounter",
          "type": "number",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1151,
              "column": 8
            },
            "end": {
              "line": 1151,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataEnabled",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 127,
              "column": 8
            },
            "end": {
              "line": 127,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 129,
              "column": 8
            },
            "end": {
              "line": 129,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInvalid",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 131,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__data",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1133,
              "column": 8
            },
            "end": {
              "line": 1133,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPending",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1135,
              "column": 8
            },
            "end": {
              "line": 1135,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataOld",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1137,
              "column": 8
            },
            "end": {
              "line": 1137,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataProto",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 139,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataHasAccessor",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 141,
              "column": 8
            },
            "end": {
              "line": 141,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInstanceProps",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 143,
              "column": 8
            },
            "end": {
              "line": 143,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataClientsReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1115,
              "column": 8
            },
            "end": {
              "line": 1115,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPendingClients",
          "type": "Array",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1117,
              "column": 8
            },
            "end": {
              "line": 1117,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataToNotify",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1119,
              "column": 8
            },
            "end": {
              "line": 1119,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataLinkedPaths",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1121,
              "column": 8
            },
            "end": {
              "line": 1121,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHasPaths",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1123,
              "column": 8
            },
            "end": {
              "line": 1123,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataCompoundStorage",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1125,
              "column": 8
            },
            "end": {
              "line": 1125,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHost",
          "type": "Polymer_PropertyEffects",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1127,
              "column": 8
            },
            "end": {
              "line": 1127,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataTemp",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1129,
              "column": 8
            },
            "end": {
              "line": 1129,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataClientsInitialized",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1131,
              "column": 8
            },
            "end": {
              "line": 1131,
              "column": 38
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__computeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1139,
              "column": 8
            },
            "end": {
              "line": 1139,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__reflectEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1141,
              "column": 8
            },
            "end": {
              "line": 1141,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__notifyEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1143,
              "column": 8
            },
            "end": {
              "line": 1143,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__propagateEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1145,
              "column": 8
            },
            "end": {
              "line": 1145,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__observeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1147,
              "column": 8
            },
            "end": {
              "line": 1147,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__readOnly",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1149,
              "column": 8
            },
            "end": {
              "line": 1149,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__templateInfo",
          "type": "!TemplateInfo",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1153,
              "column": 8
            },
            "end": {
              "line": 1153,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "scrollTarget",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 10
            },
            "end": {
              "line": 47,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "scrollHandler",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 10
            },
            "end": {
              "line": 51,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "passthrough",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 10
            },
            "end": {
              "line": 57,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        }
      ],
      "methods": [
        {
          "name": "_stampTemplate",
          "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2319,
              "column": 6
            },
            "end": {
              "line": 2344,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to stamp"
            }
          ],
          "return": {
            "type": "!StampedTemplate",
            "desc": "Cloned template content"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addMethodEventListenerToNode",
          "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 447,
              "column": 6
            },
            "end": {
              "line": 452,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add listener on"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of method"
            },
            {
              "name": "context",
              "type": "*=",
              "description": "Context the method will be called on (defaults\n  to `node`)"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "Generated handler function"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_addEventListenerToNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 461,
              "column": 6
            },
            "end": {
              "line": 463,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add event listener to"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to add"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_removeEventListenerFromNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 472,
              "column": 6
            },
            "end": {
              "line": 474,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to remove event listener from"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to remove"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "attributeChangedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`attributeChangedCallback`.\n\nBy default, attributes declared in `properties` metadata are\ndeserialized using their `type` information to properties of the\nsame name.  \"Dash-cased\" attributes are deserialzed to \"camelCase\"\nproperties.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 699,
              "column": 6
            },
            "end": {
              "line": 707,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of attribute."
            },
            {
              "name": "old",
              "type": "?string",
              "description": "Old value of attribute."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "Current value of attribute."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProperties",
          "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 557,
              "column": 6
            },
            "end": {
              "line": 597,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProtoProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1183,
              "column": 6
            },
            "end": {
              "line": 1187,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the prototype"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_initializeInstanceProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n`_setProperty`'s `shouldNotify: true`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1196,
              "column": 6
            },
            "end": {
              "line": 1205,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the instance"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_ensureAttribute",
          "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 236,
              "column": 6
            },
            "end": {
              "line": 240,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to ensure is set."
            },
            {
              "name": "value",
              "type": "string",
              "description": "of the attribute."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_attributeToProperty",
          "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 252,
              "column": 6
            },
            "end": {
              "line": 258,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to deserialize."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "of the attribute."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "type to deserialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_propertyToAttribute",
          "description": "Serializes a property to its associated attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 267,
              "column": 6
            },
            "end": {
              "line": 273,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name to reflect."
            },
            {
              "name": "attribute",
              "type": "string=",
              "description": "Attribute name to reflect."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Property value to refect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_valueToNodeAttribute",
          "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 287,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Element to set attribute to."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to serialize."
            },
            {
              "name": "attribute",
              "type": "string",
              "description": "Attribute name to serialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_serializeValue",
          "description": "Converts a typed JavaScript value to a string.\n\nThis method is called by Polymer when setting JS property values to\nHTML attributes.  Users may override this method on Polymer element\nprototypes to provide serialization for custom types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 306,
              "column": 6
            },
            "end": {
              "line": 326,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "*",
              "description": "Property value to serialize."
            }
          ],
          "return": {
            "type": "(string|undefined)",
            "desc": "String serialized from the provided property value."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_deserializeValue",
          "description": "Converts a string to a typed JavaScript value.\n\nThis method is called by Polymer when reading HTML attribute values to\nJS properties.  Users may override this method on Polymer element\nprototypes to provide deserialization for custom `type`s.  Note,\nthe `type` argument is the value of the `type` field provided in the\n`properties` configuration object for a given property, and is\nby convention the constructor for the type to deserialize.\n\nNote: The return value of `undefined` is used as a sentinel value to\nindicate the attribute should be removed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 387,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "?string",
              "description": "Attribute value to deserialize."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "Type to deserialize the string to."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Typed value deserialized from the provided string."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_createPropertyAccessor",
          "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.  When calling on\na prototype, any overwritten values are saved in `__dataProto`,\nand it is up to the subclasser to decide how/when to set those\nproperties back into the accessor.  When calling on an instance,\nthe overwritten value is set via `_setPendingProperty`, and the\nuser should call `_invalidateProperties` or `_flushProperties`\nfor the values to take effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 411,
              "column": 6
            },
            "end": {
              "line": 431,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_hasAccessor",
          "description": "Returns true if this library created an accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 439,
              "column": 6
            },
            "end": {
              "line": 441,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if an accessor was created"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_setProperty",
          "description": "Overrides base implementation to ensure all accessors set `shouldNotify`\nto true, for per-property notification tracking.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1472,
              "column": 6
            },
            "end": {
              "line": 1476,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingProperty",
          "description": "Overrides the `PropertyAccessors` implementation to introduce special\ndirty check logic depending on the property & value being set:\n\n1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n   Stored in `__dataTemp`, dirty checked against `__dataTemp`\n2. Object set to simple property (e.g. 'prop': {...})\n   Stored in `__dataTemp` and `__data`, dirty checked against\n   `__dataTemp` by default implementation of `_shouldPropertyChange`\n3. Primitive value set to simple property (e.g. 'prop': 42)\n   Stored in `__data`, dirty checked against `__data`\n\nThe dirty-check is important to prevent cycles due to two-way\nnotification, but paths and objects are only dirty checked against any\nprevious value set during this turn via a \"temporary cache\" that is\ncleared when the last `_propertiesChaged` exits. This is so:\na. any cached array paths (e.g. 'array.3.prop') may be invalidated\n   due to array mutations like shift/unshift/splice; this is fine\n   since path changes are dirty-checked at user entry points like `set`\nb. dirty-checking for objects only lasts one turn to allow the user\n   to mutate the object in-place and re-set it with the same identity\n   and have all sub-properties re-propagated in a subsequent turn.\n\nThe temp cache is not necessarily sufficient to prevent invalid array\npaths, since a splice can happen during the same turn (with pathological\nuser code); we could introduce a \"fixup\" for temporarily cached array\npaths if needed: https://github.com/Polymer/polymer/issues/4227",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1435,
              "column": 6
            },
            "end": {
              "line": 1464,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "True if property should fire notification\n  event (applies only for `notify: true` properties)"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property changed"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_isPropertyPending",
          "description": "Returns true if the specified property has a pending change.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 493,
              "column": 6
            },
            "end": {
              "line": 495,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if property has a pending change"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_invalidateProperties",
          "description": "Overrides `PropertyAccessor`'s default async queuing of\n`_propertiesChanged`: if `__dataReady` is false (has not yet been\nmanually flushed), the function no-ops; otherwise flushes\n`_propertiesChanged` synchronously.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1486,
              "column": 6
            },
            "end": {
              "line": 1490,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enableProperties",
          "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 523,
              "column": 6
            },
            "end": {
              "line": 532,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_flushProperties",
          "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 551,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 61,
              "column": 6
            },
            "end": {
              "line": 69,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_propertiesChanged",
          "description": "Implements `PropertyAccessors`'s properties changed callback.\n\nRuns each class of effects for the batch of changed properties in\na specific order (compute, propagate, reflect, observe, notify).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1625,
              "column": 6
            },
            "end": {
              "line": 1658,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps"
            },
            {
              "name": "changedProps"
            },
            {
              "name": "oldProps"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` for primitive types if a\nstrict equality check fails, and returns `true` for all Object/Arrays.\nThe method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 606,
              "column": 6
            },
            "end": {
              "line": 613,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "value",
              "type": "*",
              "description": "New property value"
            },
            {
              "name": "old",
              "type": "*",
              "description": "Previous property value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_addPropertyEffect",
          "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1219,
              "column": 6
            },
            "end": {
              "line": 1227,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removePropertyEffect",
          "description": "Removes the given property effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1236,
              "column": 6
            },
            "end": {
              "line": 1242,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property the effect was associated with"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object to remove"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasPropertyEffect",
          "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1253,
              "column": 6
            },
            "end": {
              "line": 1256,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "type",
              "type": "string=",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReadOnlyEffect",
          "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1266,
              "column": 6
            },
            "end": {
              "line": 1268,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasNotifyEffect",
          "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1278,
              "column": 6
            },
            "end": {
              "line": 1280,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReflectEffect",
          "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1290,
              "column": 6
            },
            "end": {
              "line": 1292,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasComputedEffect",
          "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1302,
              "column": 6
            },
            "end": {
              "line": 1304,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingPropertyOrPath",
          "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1336,
              "column": 6
            },
            "end": {
              "line": 1368,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(number|string)>)",
              "description": "Path to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "Set to true if this change should\n cause a property notification event dispatch"
            },
            {
              "name": "isPathNotification",
              "type": "boolean=",
              "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setUnmanagedPropertyToNode",
          "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1390,
              "column": 6
            },
            "end": {
              "line": 1398,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "The node to set a property on"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "The property to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to set"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enqueueClient",
          "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1500,
              "column": 6
            },
            "end": {
              "line": 1505,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "client",
              "type": "Object",
              "description": "PropertyEffects client to enqueue"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_flushClients",
          "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1513,
              "column": 6
            },
            "end": {
              "line": 1524,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__enableOrFlushClients",
          "description": "(c) the stamped dom enables.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1538,
              "column": 6
            },
            "end": {
              "line": 1551,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_readyClients",
          "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 644,
              "column": 6
            },
            "end": {
              "line": 653,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "setProperties",
          "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1578,
              "column": 6
            },
            "end": {
              "line": 1589,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
            },
            {
              "name": "setReadOnly",
              "type": "boolean=",
              "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_propagatePropertyChanges",
          "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1669,
              "column": 6
            },
            "end": {
              "line": 1679,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProps",
              "type": "Object",
              "description": "Bag of changed properties"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "linkPaths",
          "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1689,
              "column": 6
            },
            "end": {
              "line": 1694,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "to",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to link."
            },
            {
              "name": "from",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Source path to link."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unlinkPaths",
          "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1705,
              "column": 6
            },
            "end": {
              "line": 1710,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to unlink."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifySplices",
          "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, obect: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1741,
              "column": 6
            },
            "end": {
              "line": 1745,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "splices",
              "type": "Array",
              "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "get",
          "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1766,
              "column": 6
            },
            "end": {
              "line": 1768,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "set",
          "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1790,
              "column": 6
            },
            "end": {
              "line": 1800,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set at the specified path."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "push",
          "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1816,
              "column": 6
            },
            "end": {
              "line": 1825,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path to array."
            },
            {
              "name": "...items"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "pop",
          "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1840,
              "column": 6
            },
            "end": {
              "line": 1849,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "splice",
          "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1868,
              "column": 6
            },
            "end": {
              "line": 1885,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path to array."
            },
            {
              "name": "start",
              "type": "number",
              "description": "Index from which to start removing/inserting."
            },
            {
              "name": "deleteCount",
              "type": "number",
              "description": "Number of items to remove."
            },
            {
              "name": "...items"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of removed items."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "shift",
          "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1900,
              "column": 6
            },
            "end": {
              "line": 1909,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unshift",
          "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1925,
              "column": 6
            },
            "end": {
              "line": 1933,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path to array."
            },
            {
              "name": "...items"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifyPath",
          "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1947,
              "column": 6
            },
            "end": {
              "line": 1964,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Value at the path (optional)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReadOnlyProperty",
          "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1976,
              "column": 6
            },
            "end": {
              "line": 1983,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createPropertyObserver",
          "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1996,
              "column": 6
            },
            "end": {
              "line": 2006,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createMethodObserver",
          "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2018,
              "column": 6
            },
            "end": {
              "line": 2024,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createNotifyingProperty",
          "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2034,
              "column": 6
            },
            "end": {
              "line": 2042,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReflectedProperty",
          "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2052,
              "column": 6
            },
            "end": {
              "line": 2065,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createComputedProperty",
          "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2078,
              "column": 6
            },
            "end": {
              "line": 2084,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_bindTemplate",
          "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2254,
              "column": 6
            },
            "end": {
              "line": 2277,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            },
            {
              "name": "instanceBinding",
              "type": "boolean=",
              "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removeBoundDom",
          "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2354,
              "column": 6
            },
            "end": {
              "line": 2375,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "!StampedTemplate",
              "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "connectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 609,
              "column": 6
            },
            "end": {
              "line": 614,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`disconnectedCallback`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 620,
              "column": 6
            },
            "end": {
              "line": 620,
              "column": 31
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_attachDom",
          "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 667,
              "column": 6
            },
            "end": {
              "line": 683,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "NodeList",
              "description": "to attach to the element."
            }
          ],
          "return": {
            "type": "Node",
            "desc": "node to which the dom has been attached."
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "updateStyles",
          "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 726,
              "column": 6
            },
            "end": {
              "line": 730,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "properties",
              "type": "Object=",
              "description": "Bag of custom property key/values to\n  apply to this element."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "resolveUrl",
          "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 743,
              "column": 6
            },
            "end": {
              "line": 748,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to resolve."
            },
            {
              "name": "base",
              "type": "string=",
              "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Rewritten URL relative to base"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_onMouseMove",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 6
            },
            "end": {
              "line": 73,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "syncOuterScroller",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 6
            },
            "end": {
              "line": 82,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_syncScrollTarget",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 6
            },
            "end": {
              "line": 92,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [
        {
          "name": "_parseTemplate",
          "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to parse"
            },
            {
              "name": "outerTemplateInfo",
              "type": "TemplateInfo=",
              "description": "Template metadata from the outer\n  template, for parsing nested templates"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Parsed template metadata"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateContent",
          "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 759,
              "column": 6
            },
            "end": {
              "line": 762,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            },
            {
              "name": "templateInfo"
            },
            {
              "name": "nodeInfo"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_parseTemplateNode",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2394,
              "column": 6
            },
            "end": {
              "line": 2408,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateChildNodes",
          "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 257,
              "column": 6
            },
            "end": {
              "line": 291,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "root",
              "type": "Node",
              "description": "Root node whose `childNodes` will be parsed"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNestedTemplate",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2479,
              "column": 6
            },
            "end": {
              "line": 2489,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateNodeAttributes",
          "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 329,
              "column": 6
            },
            "end": {
              "line": 338,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNodeAttribute",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2427,
              "column": 6
            },
            "end": {
              "line": 2463,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            },
            {
              "name": "name"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_contentForTemplate",
          "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 384,
              "column": 6
            },
            "end": {
              "line": 387,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template to retrieve `content` for"
            }
          ],
          "return": {
            "type": "DocumentFragment",
            "desc": "Content fragment"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "createPropertiesForAttributes",
          "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "addPropertyEffect",
          "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n  {\n    fn: effectFunction, // Reference to function to call to perform effect\n    info: { ... }       // Effect metadata passed to function\n    trigger: {          // Optional triggering metadata; if not provided\n      name: string      // the property is treated as a wildcard\n      structured: boolean\n      wildcard: boolean\n    }\n  }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n  effectFunction(inst, path, props, oldProps, info, hasPaths)",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2123,
              "column": 6
            },
            "end": {
              "line": 2125,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createPropertyObserver",
          "description": "Creates a single-property observer for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2136,
              "column": 6
            },
            "end": {
              "line": 2138,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createMethodObserver",
          "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal Javascript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2152,
              "column": 6
            },
            "end": {
              "line": 2154,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createNotifyingProperty",
          "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2163,
              "column": 6
            },
            "end": {
              "line": 2165,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReadOnlyProperty",
          "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2182,
              "column": 6
            },
            "end": {
              "line": 2184,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReflectedProperty",
          "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2193,
              "column": 6
            },
            "end": {
              "line": 2195,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createComputedProperty",
          "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal Javascript function signature:\n`'methodName(arg1, [..., argn])'`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2210,
              "column": 6
            },
            "end": {
              "line": 2212,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "bindTemplate",
          "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2226,
              "column": 6
            },
            "end": {
              "line": 2228,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Template metadata object"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addTemplatePropertyEffect",
          "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2291,
              "column": 6
            },
            "end": {
              "line": 2297,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Template metadata to add effect to"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseBindings",
          "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2524,
              "column": 6
            },
            "end": {
              "line": 2589,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "Text to parse from attribute or textContent"
            },
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Current template metadata"
            }
          ],
          "return": {
            "type": "Array.<!BindingPart>",
            "desc": "Array of binding part metadata"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_evaluateBinding",
          "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2605,
              "column": 6
            },
            "end": {
              "line": 2622,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inst",
              "type": "this",
              "description": "Element that should be used as scope for\n  binding dependencies"
            },
            {
              "name": "part",
              "type": "BindingPart",
              "description": "Binding part metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path that triggered this effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value the binding part evaluated to"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "finalize",
          "description": "Called automatically when the first element instance is created to\nensure that class finalization work has been completed.\nMay be called by users to eagerly perform class finalization work\nprior to the creation of the first element instance.\n\nClass finalization work generally includes meta-programming such as\ncreating property accessors and any property effect metadata needed for\nthe features used.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 471,
              "column": 6
            },
            "end": {
              "line": 475,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 36,
          "column": 4
        },
        "end": {
          "line": 94,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "GridOuterScrollerElement",
      "attributes": [
        {
          "name": "scroll-target",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 10
            },
            "end": {
              "line": 47,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "scroll-handler",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 10
            },
            "end": {
              "line": 51,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "passthrough",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 10
            },
            "end": {
              "line": 57,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "vaadin-grid-outer-scroller.html",
            "start": {
              "line": 26,
              "column": 4
            },
            "end": {
              "line": 26,
              "column": 17
            }
          }
        }
      ],
      "tagname": "vaadin-grid-outer-scroller"
    },
    {
      "description": "`vaadin-grid-filter` is a helper element for the `vaadin-grid` that provides out-of-the-box UI controls,\nand handlers for filtering the grid data.",
      "summary": "",
      "path": "vaadin-grid-filter.html",
      "properties": [
        {
          "name": "__serializing",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 123,
              "column": 8
            },
            "end": {
              "line": 123,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataCounter",
          "type": "number",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1151,
              "column": 8
            },
            "end": {
              "line": 1151,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataEnabled",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 127,
              "column": 8
            },
            "end": {
              "line": 127,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 129,
              "column": 8
            },
            "end": {
              "line": 129,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInvalid",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 131,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__data",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1133,
              "column": 8
            },
            "end": {
              "line": 1133,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPending",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1135,
              "column": 8
            },
            "end": {
              "line": 1135,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataOld",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1137,
              "column": 8
            },
            "end": {
              "line": 1137,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataProto",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 139,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataHasAccessor",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 141,
              "column": 8
            },
            "end": {
              "line": 141,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataInstanceProps",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 143,
              "column": 8
            },
            "end": {
              "line": 143,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "__dataClientsReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1115,
              "column": 8
            },
            "end": {
              "line": 1115,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPendingClients",
          "type": "Array",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1117,
              "column": 8
            },
            "end": {
              "line": 1117,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataToNotify",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1119,
              "column": 8
            },
            "end": {
              "line": 1119,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataLinkedPaths",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1121,
              "column": 8
            },
            "end": {
              "line": 1121,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHasPaths",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1123,
              "column": 8
            },
            "end": {
              "line": 1123,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataCompoundStorage",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1125,
              "column": 8
            },
            "end": {
              "line": 1125,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHost",
          "type": "Polymer_PropertyEffects",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1127,
              "column": 8
            },
            "end": {
              "line": 1127,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataTemp",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1129,
              "column": 8
            },
            "end": {
              "line": 1129,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataClientsInitialized",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1131,
              "column": 8
            },
            "end": {
              "line": 1131,
              "column": 38
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__computeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1139,
              "column": 8
            },
            "end": {
              "line": 1139,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__reflectEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1141,
              "column": 8
            },
            "end": {
              "line": 1141,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__notifyEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1143,
              "column": 8
            },
            "end": {
              "line": 1143,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__propagateEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1145,
              "column": 8
            },
            "end": {
              "line": 1145,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__observeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1147,
              "column": 8
            },
            "end": {
              "line": 1147,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__readOnly",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1149,
              "column": 8
            },
            "end": {
              "line": 1149,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__templateInfo",
          "type": "!TemplateInfo",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1153,
              "column": 8
            },
            "end": {
              "line": 1153,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "path",
          "type": "string",
          "description": "JS Path of the property in the item used for filtering the data.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 12
            },
            "end": {
              "line": 43,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "value",
          "type": "string",
          "description": "Current filter value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 12
            },
            "end": {
              "line": 51,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "_connected",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 12
            },
            "end": {
              "line": 53,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "_stampTemplate",
          "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2319,
              "column": 6
            },
            "end": {
              "line": 2344,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to stamp"
            }
          ],
          "return": {
            "type": "!StampedTemplate",
            "desc": "Cloned template content"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addMethodEventListenerToNode",
          "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 447,
              "column": 6
            },
            "end": {
              "line": 452,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add listener on"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of method"
            },
            {
              "name": "context",
              "type": "*=",
              "description": "Context the method will be called on (defaults\n  to `node`)"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "Generated handler function"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_addEventListenerToNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 461,
              "column": 6
            },
            "end": {
              "line": 463,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to add event listener to"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to add"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_removeEventListenerFromNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 472,
              "column": 6
            },
            "end": {
              "line": 474,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to remove event listener from"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "Function",
              "description": "Listener function to remove"
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "attributeChangedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`attributeChangedCallback`.\n\nBy default, attributes declared in `properties` metadata are\ndeserialized using their `type` information to properties of the\nsame name.  \"Dash-cased\" attributes are deserialzed to \"camelCase\"\nproperties.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 699,
              "column": 6
            },
            "end": {
              "line": 707,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of attribute."
            },
            {
              "name": "old",
              "type": "?string",
              "description": "Old value of attribute."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "Current value of attribute."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProperties",
          "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 557,
              "column": 6
            },
            "end": {
              "line": 597,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProtoProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1183,
              "column": 6
            },
            "end": {
              "line": 1187,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the prototype"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_initializeInstanceProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n`_setProperty`'s `shouldNotify: true`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1196,
              "column": 6
            },
            "end": {
              "line": 1205,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the instance"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_ensureAttribute",
          "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 236,
              "column": 6
            },
            "end": {
              "line": 240,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to ensure is set."
            },
            {
              "name": "value",
              "type": "string",
              "description": "of the attribute."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_attributeToProperty",
          "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 252,
              "column": 6
            },
            "end": {
              "line": 258,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to deserialize."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "of the attribute."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "type to deserialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_propertyToAttribute",
          "description": "Serializes a property to its associated attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 267,
              "column": 6
            },
            "end": {
              "line": 273,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name to reflect."
            },
            {
              "name": "attribute",
              "type": "string=",
              "description": "Attribute name to reflect."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Property value to refect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_valueToNodeAttribute",
          "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 287,
              "column": 6
            },
            "end": {
              "line": 294,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Element to set attribute to."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to serialize."
            },
            {
              "name": "attribute",
              "type": "string",
              "description": "Attribute name to serialize to."
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_serializeValue",
          "description": "Converts a typed JavaScript value to a string.\n\nThis method is called by Polymer when setting JS property values to\nHTML attributes.  Users may override this method on Polymer element\nprototypes to provide serialization for custom types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 306,
              "column": 6
            },
            "end": {
              "line": 326,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "*",
              "description": "Property value to serialize."
            }
          ],
          "return": {
            "type": "(string|undefined)",
            "desc": "String serialized from the provided property value."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_deserializeValue",
          "description": "Converts a string to a typed JavaScript value.\n\nThis method is called by Polymer when reading HTML attribute values to\nJS properties.  Users may override this method on Polymer element\nprototypes to provide deserialization for custom `type`s.  Note,\nthe `type` argument is the value of the `type` field provided in the\n`properties` configuration object for a given property, and is\nby convention the constructor for the type to deserialize.\n\nNote: The return value of `undefined` is used as a sentinel value to\nindicate the attribute should be removed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 345,
              "column": 6
            },
            "end": {
              "line": 387,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "?string",
              "description": "Attribute value to deserialize."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "Type to deserialize the string to."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Typed value deserialized from the provided string."
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_createPropertyAccessor",
          "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.  When calling on\na prototype, any overwritten values are saved in `__dataProto`,\nand it is up to the subclasser to decide how/when to set those\nproperties back into the accessor.  When calling on an instance,\nthe overwritten value is set via `_setPendingProperty`, and the\nuser should call `_invalidateProperties` or `_flushProperties`\nfor the values to take effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 411,
              "column": 6
            },
            "end": {
              "line": 431,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
            }
          ],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_hasAccessor",
          "description": "Returns true if this library created an accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 439,
              "column": 6
            },
            "end": {
              "line": 441,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if an accessor was created"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_setProperty",
          "description": "Overrides base implementation to ensure all accessors set `shouldNotify`\nto true, for per-property notification tracking.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1472,
              "column": 6
            },
            "end": {
              "line": 1476,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingProperty",
          "description": "Overrides the `PropertyAccessors` implementation to introduce special\ndirty check logic depending on the property & value being set:\n\n1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n   Stored in `__dataTemp`, dirty checked against `__dataTemp`\n2. Object set to simple property (e.g. 'prop': {...})\n   Stored in `__dataTemp` and `__data`, dirty checked against\n   `__dataTemp` by default implementation of `_shouldPropertyChange`\n3. Primitive value set to simple property (e.g. 'prop': 42)\n   Stored in `__data`, dirty checked against `__data`\n\nThe dirty-check is important to prevent cycles due to two-way\nnotification, but paths and objects are only dirty checked against any\nprevious value set during this turn via a \"temporary cache\" that is\ncleared when the last `_propertiesChaged` exits. This is so:\na. any cached array paths (e.g. 'array.3.prop') may be invalidated\n   due to array mutations like shift/unshift/splice; this is fine\n   since path changes are dirty-checked at user entry points like `set`\nb. dirty-checking for objects only lasts one turn to allow the user\n   to mutate the object in-place and re-set it with the same identity\n   and have all sub-properties re-propagated in a subsequent turn.\n\nThe temp cache is not necessarily sufficient to prevent invalid array\npaths, since a splice can happen during the same turn (with pathological\nuser code); we could introduce a \"fixup\" for temporarily cached array\npaths if needed: https://github.com/Polymer/polymer/issues/4227",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1435,
              "column": 6
            },
            "end": {
              "line": 1464,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "True if property should fire notification\n  event (applies only for `notify: true` properties)"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property changed"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_isPropertyPending",
          "description": "Returns true if the specified property has a pending change.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 493,
              "column": 6
            },
            "end": {
              "line": 495,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if property has a pending change"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_invalidateProperties",
          "description": "Overrides `PropertyAccessor`'s default async queuing of\n`_propertiesChanged`: if `__dataReady` is false (has not yet been\nmanually flushed), the function no-ops; otherwise flushes\n`_propertiesChanged` synchronously.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1486,
              "column": 6
            },
            "end": {
              "line": 1490,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enableProperties",
          "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 523,
              "column": 6
            },
            "end": {
              "line": 532,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_flushProperties",
          "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 543,
              "column": 6
            },
            "end": {
              "line": 551,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_propertiesChanged",
          "description": "Implements `PropertyAccessors`'s properties changed callback.\n\nRuns each class of effects for the batch of changed properties in\na specific order (compute, propagate, reflect, observe, notify).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1625,
              "column": 6
            },
            "end": {
              "line": 1658,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps"
            },
            {
              "name": "changedProps"
            },
            {
              "name": "oldProps"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` for primitive types if a\nstrict equality check fails, and returns `true` for all Object/Arrays.\nThe method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 606,
              "column": 6
            },
            "end": {
              "line": 613,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "value",
              "type": "*",
              "description": "New property value"
            },
            {
              "name": "old",
              "type": "*",
              "description": "Previous property value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_addPropertyEffect",
          "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1219,
              "column": 6
            },
            "end": {
              "line": 1227,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removePropertyEffect",
          "description": "Removes the given property effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1236,
              "column": 6
            },
            "end": {
              "line": 1242,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property the effect was associated with"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object to remove"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasPropertyEffect",
          "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1253,
              "column": 6
            },
            "end": {
              "line": 1256,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "type",
              "type": "string=",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReadOnlyEffect",
          "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1266,
              "column": 6
            },
            "end": {
              "line": 1268,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasNotifyEffect",
          "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1278,
              "column": 6
            },
            "end": {
              "line": 1280,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReflectEffect",
          "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1290,
              "column": 6
            },
            "end": {
              "line": 1292,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasComputedEffect",
          "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1302,
              "column": 6
            },
            "end": {
              "line": 1304,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingPropertyOrPath",
          "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1336,
              "column": 6
            },
            "end": {
              "line": 1368,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(number|string)>)",
              "description": "Path to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "Set to true if this change should\n cause a property notification event dispatch"
            },
            {
              "name": "isPathNotification",
              "type": "boolean=",
              "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setUnmanagedPropertyToNode",
          "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1390,
              "column": 6
            },
            "end": {
              "line": 1398,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "The node to set a property on"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "The property to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to set"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enqueueClient",
          "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1500,
              "column": 6
            },
            "end": {
              "line": 1505,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "client",
              "type": "Object",
              "description": "PropertyEffects client to enqueue"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_flushClients",
          "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1513,
              "column": 6
            },
            "end": {
              "line": 1524,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__enableOrFlushClients",
          "description": "(c) the stamped dom enables.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1538,
              "column": 6
            },
            "end": {
              "line": 1551,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_readyClients",
          "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 644,
              "column": 6
            },
            "end": {
              "line": 653,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "setProperties",
          "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1578,
              "column": 6
            },
            "end": {
              "line": 1589,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
            },
            {
              "name": "setReadOnly",
              "type": "boolean=",
              "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_propagatePropertyChanges",
          "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1669,
              "column": 6
            },
            "end": {
              "line": 1679,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProps",
              "type": "Object",
              "description": "Bag of changed properties"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "linkPaths",
          "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1689,
              "column": 6
            },
            "end": {
              "line": 1694,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "to",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to link."
            },
            {
              "name": "from",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Source path to link."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unlinkPaths",
          "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1705,
              "column": 6
            },
            "end": {
              "line": 1710,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to unlink."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifySplices",
          "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, obect: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1741,
              "column": 6
            },
            "end": {
              "line": 1745,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "splices",
              "type": "Array",
              "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "get",
          "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1766,
              "column": 6
            },
            "end": {
              "line": 1768,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "set",
          "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1790,
              "column": 6
            },
            "end": {
              "line": 1800,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set at the specified path."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "push",
          "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1816,
              "column": 6
            },
            "end": {
              "line": 1825,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path to array."
            },
            {
              "name": "...items"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "pop",
          "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1840,
              "column": 6
            },
            "end": {
              "line": 1849,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "splice",
          "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1868,
              "column": 6
            },
            "end": {
              "line": 1885,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path to array."
            },
            {
              "name": "start",
              "type": "number",
              "description": "Index from which to start removing/inserting."
            },
            {
              "name": "deleteCount",
              "type": "number",
              "description": "Number of items to remove."
            },
            {
              "name": "...items"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of removed items."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "shift",
          "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1900,
              "column": 6
            },
            "end": {
              "line": 1909,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unshift",
          "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1925,
              "column": 6
            },
            "end": {
              "line": 1933,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path to array."
            },
            {
              "name": "...items"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifyPath",
          "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1947,
              "column": 6
            },
            "end": {
              "line": 1964,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Value at the path (optional)."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReadOnlyProperty",
          "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1976,
              "column": 6
            },
            "end": {
              "line": 1983,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createPropertyObserver",
          "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1996,
              "column": 6
            },
            "end": {
              "line": 2006,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createMethodObserver",
          "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2018,
              "column": 6
            },
            "end": {
              "line": 2024,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createNotifyingProperty",
          "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2034,
              "column": 6
            },
            "end": {
              "line": 2042,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReflectedProperty",
          "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2052,
              "column": 6
            },
            "end": {
              "line": 2065,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createComputedProperty",
          "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2078,
              "column": 6
            },
            "end": {
              "line": 2084,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_bindTemplate",
          "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2254,
              "column": 6
            },
            "end": {
              "line": 2277,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            },
            {
              "name": "instanceBinding",
              "type": "boolean=",
              "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removeBoundDom",
          "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2354,
              "column": 6
            },
            "end": {
              "line": 2375,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "!StampedTemplate",
              "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 8
            },
            "end": {
              "line": 60,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "disconnectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`disconnectedCallback`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 620,
              "column": 6
            },
            "end": {
              "line": 620,
              "column": 31
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_attachDom",
          "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 667,
              "column": 6
            },
            "end": {
              "line": 683,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "NodeList",
              "description": "to attach to the element."
            }
          ],
          "return": {
            "type": "Node",
            "desc": "node to which the dom has been attached."
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "updateStyles",
          "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 726,
              "column": 6
            },
            "end": {
              "line": 730,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "properties",
              "type": "Object=",
              "description": "Bag of custom property key/values to\n  apply to this element."
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "resolveUrl",
          "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 743,
              "column": 6
            },
            "end": {
              "line": 748,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to resolve."
            },
            {
              "name": "base",
              "type": "string=",
              "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Rewritten URL relative to base"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_filterChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 87,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path"
            },
            {
              "name": "value"
            },
            {
              "name": "connected"
            }
          ]
        },
        {
          "name": "focus",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 8
            },
            "end": {
              "line": 91,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [
        {
          "name": "_parseTemplate",
          "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to parse"
            },
            {
              "name": "outerTemplateInfo",
              "type": "TemplateInfo=",
              "description": "Template metadata from the outer\n  template, for parsing nested templates"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Parsed template metadata"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateContent",
          "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 759,
              "column": 6
            },
            "end": {
              "line": 762,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            },
            {
              "name": "templateInfo"
            },
            {
              "name": "nodeInfo"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_parseTemplateNode",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2394,
              "column": 6
            },
            "end": {
              "line": 2408,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateChildNodes",
          "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 257,
              "column": 6
            },
            "end": {
              "line": 291,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "root",
              "type": "Node",
              "description": "Root node whose `childNodes` will be parsed"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNestedTemplate",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2479,
              "column": 6
            },
            "end": {
              "line": 2489,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateNodeAttributes",
          "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 329,
              "column": 6
            },
            "end": {
              "line": 338,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNodeAttribute",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2427,
              "column": 6
            },
            "end": {
              "line": 2463,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            },
            {
              "name": "name"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_contentForTemplate",
          "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 384,
              "column": 6
            },
            "end": {
              "line": 387,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template to retrieve `content` for"
            }
          ],
          "return": {
            "type": "DocumentFragment",
            "desc": "Content fragment"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "createPropertiesForAttributes",
          "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 113,
              "column": 6
            },
            "end": {
              "line": 118,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "addPropertyEffect",
          "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n  {\n    fn: effectFunction, // Reference to function to call to perform effect\n    info: { ... }       // Effect metadata passed to function\n    trigger: {          // Optional triggering metadata; if not provided\n      name: string      // the property is treated as a wildcard\n      structured: boolean\n      wildcard: boolean\n    }\n  }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n  effectFunction(inst, path, props, oldProps, info, hasPaths)",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2123,
              "column": 6
            },
            "end": {
              "line": 2125,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createPropertyObserver",
          "description": "Creates a single-property observer for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2136,
              "column": 6
            },
            "end": {
              "line": 2138,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createMethodObserver",
          "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal Javascript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2152,
              "column": 6
            },
            "end": {
              "line": 2154,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createNotifyingProperty",
          "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2163,
              "column": 6
            },
            "end": {
              "line": 2165,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReadOnlyProperty",
          "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2182,
              "column": 6
            },
            "end": {
              "line": 2184,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReflectedProperty",
          "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2193,
              "column": 6
            },
            "end": {
              "line": 2195,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createComputedProperty",
          "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal Javascript function signature:\n`'methodName(arg1, [..., argn])'`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2210,
              "column": 6
            },
            "end": {
              "line": 2212,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "bindTemplate",
          "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2226,
              "column": 6
            },
            "end": {
              "line": 2228,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Template metadata object"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addTemplatePropertyEffect",
          "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2291,
              "column": 6
            },
            "end": {
              "line": 2297,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Template metadata to add effect to"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseBindings",
          "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2524,
              "column": 6
            },
            "end": {
              "line": 2589,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "Text to parse from attribute or textContent"
            },
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Current template metadata"
            }
          ],
          "return": {
            "type": "Array.<!BindingPart>",
            "desc": "Array of binding part metadata"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_evaluateBinding",
          "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2605,
              "column": 6
            },
            "end": {
              "line": 2622,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inst",
              "type": "this",
              "description": "Element that should be used as scope for\n  binding dependencies"
            },
            {
              "name": "part",
              "type": "BindingPart",
              "description": "Binding part metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path that triggered this effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value the binding part evaluated to"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "finalize",
          "description": "Called automatically when the first element instance is created to\nensure that class finalization work has been completed.\nMay be called by users to eagerly perform class finalization work\nprior to the creation of the first element instance.\n\nClass finalization work generally includes meta-programming such as\ncreating property accessors and any property effect metadata needed for\nthe features used.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 471,
              "column": 6
            },
            "end": {
              "line": 475,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 31,
          "column": 6
        },
        "end": {
          "line": 93,
          "column": 7
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "GridFilterElement",
      "attributes": [
        {
          "name": "path",
          "description": "JS Path of the property in the item used for filtering the data.",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 12
            },
            "end": {
              "line": 43,
              "column": 24
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "value",
          "description": "Current filter value.",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 12
            },
            "end": {
              "line": 51,
              "column": 13
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "filter",
          "range": {
            "file": "vaadin-grid-filter.html",
            "start": {
              "line": 20,
              "column": 4
            },
            "end": {
              "line": 22,
              "column": 11
            }
          }
        }
      ],
      "tagname": "vaadin-grid-filter"
    }
  ],
  "mixins": [
    {
      "description": "",
      "summary": "",
      "path": "vaadin-grid-dynamic-columns-mixin.html",
      "properties": [],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 15,
              "column": 4
            },
            "end": {
              "line": 18,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_hasColumnGroups",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 20,
              "column": 4
            },
            "end": {
              "line": 28,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "columns"
            }
          ]
        },
        {
          "name": "_getChildColumns",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 35,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "el"
            }
          ]
        },
        {
          "name": "_flattenColumnGroups",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 4
            },
            "end": {
              "line": 47,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "columns"
            }
          ]
        },
        {
          "name": "_getColumnTree",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 4
            },
            "end": {
              "line": 64,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateColumnTree",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_addNodeObserver",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 4
            },
            "end": {
              "line": 95,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_arrayEquals",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 4
            },
            "end": {
              "line": 114,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arr1"
            },
            {
              "name": "arr2"
            }
          ]
        },
        {
          "name": "_checkImports",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 4
            },
            "end": {
              "line": 128,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateLastColumn",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 4
            },
            "end": {
              "line": 139,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 2
        },
        "end": {
          "line": 140,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "Vaadin.Grid.DynamicColumnsMixin",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "",
      "summary": "",
      "path": "vaadin-grid-data-provider-mixin.html",
      "properties": [
        {
          "name": "pageSize",
          "type": "number",
          "description": "Number of items fetched at a time from the dataprovider.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_pageSizeChanged\""
            }
          },
          "defaultValue": "50"
        },
        {
          "name": "dataProvider",
          "type": "Object",
          "description": "Function that provides items lazily. Receives arguments `params`, `callback`\n\n`params.page` Requested page index\n\n`params.pageSize` Current page size\n\n`params.filters` Currently applied filters\n\n`params.sortOrders` Currently applied sorting orders",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 8
            },
            "end": {
              "line": 92,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_dataProviderChanged\""
            }
          }
        },
        {
          "name": "_loading",
          "type": "boolean",
          "description": "`true` while data is being requested from the data provider.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 8
            },
            "end": {
              "line": 97,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_cache",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 8
            },
            "end": {
              "line": 104,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        },
        {
          "name": "_pendingRequests",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 8
            },
            "end": {
              "line": 111,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{}"
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 4
            },
            "end": {
              "line": 118,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_templateItemChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 4
            },
            "end": {
              "line": 136,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_getCachedItem",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 138,
              "column": 4
            },
            "end": {
              "line": 148,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "index"
            }
          ]
        },
        {
          "name": "_getItem",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 150,
              "column": 4
            },
            "end": {
              "line": 177,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "index"
            },
            {
              "name": "el"
            }
          ]
        },
        {
          "name": "_cachedPagesForPhysicalItems",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 4
            },
            "end": {
              "line": 183,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_uncachedPagesForPhysicalItems",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 4
            },
            "end": {
              "line": 189,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_eagerlyLoadPages",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 4
            },
            "end": {
              "line": 205,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_pagesForPhysicalItems",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 4
            },
            "end": {
              "line": 224,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateItems",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 226,
              "column": 4
            },
            "end": {
              "line": 241,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "page"
            },
            {
              "name": "items"
            }
          ]
        },
        {
          "name": "_loadPage",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 243,
              "column": 4
            },
            "end": {
              "line": 269,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "page"
            },
            {
              "name": "cb"
            }
          ]
        },
        {
          "name": "_getPageForIndex",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 271,
              "column": 4
            },
            "end": {
              "line": 273,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "index"
            }
          ]
        },
        {
          "name": "clearCache",
          "description": "Clears the cached pages and reloads data from dataprovider when needed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 278,
              "column": 4
            },
            "end": {
              "line": 285,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_flushItemsDebouncer",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 287,
              "column": 4
            },
            "end": {
              "line": 291,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_pageSizeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 293,
              "column": 4
            },
            "end": {
              "line": 297,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "pageSize"
            },
            {
              "name": "oldPageSize"
            }
          ]
        },
        {
          "name": "_checkSize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 299,
              "column": 4
            },
            "end": {
              "line": 303,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_dataProviderChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 305,
              "column": 4
            },
            "end": {
              "line": 318,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataProvider"
            },
            {
              "name": "oldDataProvider"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 62,
          "column": 2
        },
        "end": {
          "line": 320,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "Vaadin.Grid.DataProviderMixin",
      "attributes": [
        {
          "name": "page-size",
          "description": "Number of items fetched at a time from the dataprovider.",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 8
            },
            "end": {
              "line": 74,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "data-provider",
          "description": "Function that provides items lazily. Receives arguments `params`, `callback`\n\n`params.page` Requested page index\n\n`params.pageSize` Current page size\n\n`params.filters` Currently applied filters\n\n`params.sortOrders` Currently applied sorting orders",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 8
            },
            "end": {
              "line": 92,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "",
      "summary": "",
      "path": "vaadin-grid-array-data-provider-mixin.html",
      "properties": [
        {
          "name": "items",
          "type": "Array",
          "description": "An array containing the items which will be stamped to the column template\ninstances.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 22,
              "column": 8
            },
            "end": {
              "line": 22,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "_itemsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 4
            },
            "end": {
              "line": 44,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items"
            },
            {
              "name": "splices"
            }
          ]
        },
        {
          "name": "_arrayDataProvider",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 4
            },
            "end": {
              "line": 63,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "opts"
            },
            {
              "name": "cb"
            }
          ]
        },
        {
          "name": "_checkPaths",
          "description": "Check array of filters/sorters for paths validity, console.warn invalid items",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 4
            },
            "end": {
              "line": 96,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arrayToCheck",
              "type": "Array",
              "description": "The array of filters/sorters to check"
            },
            {
              "name": "action",
              "type": "string",
              "description": "The name of action to include in warning (filtering, sorting)"
            },
            {
              "name": "items",
              "type": "Array"
            }
          ]
        },
        {
          "name": "_multiSort",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 4
            },
            "end": {
              "line": 109,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ]
        },
        {
          "name": "_normalizeEmptyValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 111,
              "column": 4
            },
            "end": {
              "line": 119,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_compare",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 4
            },
            "end": {
              "line": 132,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ]
        },
        {
          "name": "_filter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 134,
              "column": 4
            },
            "end": {
              "line": 141,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 2
        },
        "end": {
          "line": 143,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "Vaadin.Grid.ArrayDataProviderMixin",
      "attributes": [
        {
          "name": "items",
          "description": "An array containing the items which will be stamped to the column template\ninstances.",
          "sourceRange": {
            "start": {
              "line": 22,
              "column": 8
            },
            "end": {
              "line": 22,
              "column": 20
            }
          },
          "metadata": {},
          "type": "Array"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "",
      "summary": "",
      "path": "vaadin-grid-cell-click-mixin.html",
      "properties": [],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 15,
              "column": 4
            },
            "end": {
              "line": 21,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_cellContentFocusHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 23,
              "column": 4
            },
            "end": {
              "line": 30,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_getCellContentByElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            }
          ]
        },
        {
          "name": "_getCellByCellContent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 47,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cellContent"
            }
          ]
        },
        {
          "name": "_onClick",
          "description": "yet at the point when tap event is being executed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_isFocusable",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 4
            },
            "end": {
              "line": 80,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 2
        },
        "end": {
          "line": 81,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "Vaadin.Grid.CellClickMixin",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "",
      "summary": "",
      "path": "vaadin-grid-active-item-mixin.html",
      "properties": [
        {
          "name": "activeItem",
          "type": "Object",
          "description": "The item user has last interacted with. Turns to `null` after user deactivates\nthe item by re-interacting with the currently active item.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 8
            },
            "end": {
              "line": 25,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "null"
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 38,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_activateItem",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 4
            },
            "end": {
              "line": 45,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_activeItemChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 53,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 2
        },
        "end": {
          "line": 54,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "Vaadin.Grid.ActiveItemMixin",
      "attributes": [
        {
          "name": "active-item",
          "description": "The item user has last interacted with. Turns to `null` after user deactivates\nthe item by re-interacting with the currently active item.",
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 8
            },
            "end": {
              "line": 25,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "",
      "summary": "",
      "path": "vaadin-grid-scroll-mixin.html",
      "properties": [
        {
          "name": "ios",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 8
            },
            "end": {
              "line": 67,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "fixedSections",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 73,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_frozenCells",
          "type": "Array",
          "description": "Cached array of frozen cells",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        },
        {
          "name": "scrolling",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 8
            },
            "end": {
              "line": 86,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_scrollbarWidth",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 8
            },
            "end": {
              "line": 105,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 110,
              "column": 4
            },
            "end": {
              "line": 114,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_hasFixedSections",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 4
            },
            "end": {
              "line": 118,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "scrollbarWidth"
            }
          ]
        },
        {
          "name": "_onWheel",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 4
            },
            "end": {
              "line": 145,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_hasScrolledAncestor",
          "description": "Determines if the element has an ancestor prior to this\ncell content that handles the scroll delta",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 4
            },
            "end": {
              "line": 157,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "el"
            },
            {
              "name": "deltaX"
            },
            {
              "name": "deltaY"
            }
          ]
        },
        {
          "name": "_canScroll",
          "description": "Determines if the the given scroll deltas can be applied to the element\n(fully or partially)",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 4
            },
            "end": {
              "line": 168,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "el"
            },
            {
              "name": "deltaX"
            },
            {
              "name": "deltaY"
            }
          ]
        },
        {
          "name": "_afterScroll",
          "description": "Update the models, the position of the\nitems in the viewport and recycle tiles as needed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 4
            },
            "end": {
              "line": 191,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_reorderRows",
          "description": "correct order needed for preserving correct tab order between cell contents.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 4
            },
            "end": {
              "line": 218,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_frozenCellsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 220,
              "column": 4
            },
            "end": {
              "line": 231,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateLastFrozen",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 233,
              "column": 4
            },
            "end": {
              "line": 249,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_translateStationaryElements",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 251,
              "column": 4
            },
            "end": {
              "line": 266,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getTranslate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 268,
              "column": 4
            },
            "end": {
              "line": 270,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 58,
          "column": 2
        },
        "end": {
          "line": 272,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "Vaadin.Grid.ScrollMixin",
      "attributes": [
        {
          "name": "ios",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 8
            },
            "end": {
              "line": 67,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "fixed-sections",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 8
            },
            "end": {
              "line": 73,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "scrolling",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 8
            },
            "end": {
              "line": 86,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "",
      "summary": "",
      "path": "vaadin-grid-selection-mixin.html",
      "properties": [
        {
          "name": "selectedItems",
          "type": "Object",
          "description": "An array that contains the selected items.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 20,
              "column": 8
            },
            "end": {
              "line": 24,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "[]"
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 4
            },
            "end": {
              "line": 37,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_templateInstanceChangedSelection",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 4
            },
            "end": {
              "line": 55,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_isSelected",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 57,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "selectItem",
          "description": "Selects the given item.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 72,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item",
              "type": "(number|Object)",
              "description": "The item index or the item object"
            }
          ]
        },
        {
          "name": "deselectItem",
          "description": "Deselects the given item if it is already selected.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 86,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item",
              "type": "(number|Object)",
              "description": "The item index or the item object"
            }
          ]
        },
        {
          "name": "_toggleItem",
          "description": "Toggles the selected state of the given item.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 4
            },
            "end": {
              "line": 102,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item",
              "type": "(number|Object)",
              "description": "The item index or the item object"
            }
          ]
        },
        {
          "name": "_takeItem",
          "description": "Returns item object itself or by the item index.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 109,
              "column": 4
            },
            "end": {
              "line": 114,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item",
              "type": "(number|Object)",
              "description": "The item index or the item object"
            }
          ]
        },
        {
          "name": "_selectedItemsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 4
            },
            "end": {
              "line": 126,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_selectedInstanceChangedCallback",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 4
            },
            "end": {
              "line": 137,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance"
            },
            {
              "name": "value"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 2
        },
        "end": {
          "line": 138,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "Vaadin.Grid.SelectionMixin",
      "attributes": [
        {
          "name": "selected-items",
          "description": "An array that contains the selected items.",
          "sourceRange": {
            "start": {
              "line": 20,
              "column": 8
            },
            "end": {
              "line": 24,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "",
      "summary": "",
      "path": "vaadin-grid-sort-mixin.html",
      "properties": [
        {
          "name": "multiSort",
          "type": "boolean",
          "description": "When `true`, all `<vaadin-grid-sorter>` are applied for sorting.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 19,
              "column": 8
            },
            "end": {
              "line": 22,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_sorters",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 24,
              "column": 8
            },
            "end": {
              "line": 29,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        },
        {
          "name": "_previousSorters",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 8
            },
            "end": {
              "line": 36,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onSorterChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 61,
              "column": 4
            },
            "end": {
              "line": 95,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_mapSorters",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_removeArrayItem",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 4
            },
            "end": {
              "line": 111,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "array"
            },
            {
              "name": "item"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 2
        },
        "end": {
          "line": 112,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "Vaadin.Grid.SortMixin",
      "attributes": [
        {
          "name": "multi-sort",
          "description": "When `true`, all `<vaadin-grid-sorter>` are applied for sorting.",
          "sourceRange": {
            "start": {
              "line": 19,
              "column": 8
            },
            "end": {
              "line": 22,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "",
      "summary": "",
      "path": "vaadin-grid-row-details-mixin.html",
      "properties": [
        {
          "name": "expandedItems",
          "type": "Array",
          "description": "An array containing references to expanded items.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 8
            },
            "end": {
              "line": 41,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        },
        {
          "name": "_rowDetailsTemplate",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 8
            },
            "end": {
              "line": 43,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_detailsCells",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 8
            },
            "end": {
              "line": 47,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 57,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_expandedItemsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 87,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changeRecord"
            },
            {
              "name": "dataProvider"
            },
            {
              "name": "rowDetailsTemplate"
            }
          ]
        },
        {
          "name": "_configureDetailsCell",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 89,
              "column": 4
            },
            "end": {
              "line": 98,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cell"
            }
          ]
        },
        {
          "name": "_toggleDetailsCell",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 100,
              "column": 4
            },
            "end": {
              "line": 111,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "row"
            },
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "_updateDetailsCellHeights",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 4
            },
            "end": {
              "line": 117,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_isExpanded",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 119,
              "column": 4
            },
            "end": {
              "line": 121,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "expandItem",
          "description": "Expand the details row of a given item.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 130,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "collapseItem",
          "description": "Collapse the details row of a given item.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 4
            },
            "end": {
              "line": 139,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "_expandedInstanceChangedCallback",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 141,
              "column": 4
            },
            "end": {
              "line": 150,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance"
            },
            {
              "name": "value"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 30,
          "column": 2
        },
        "end": {
          "line": 151,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "Vaadin.Grid.RowDetailsMixin",
      "attributes": [
        {
          "name": "expanded-items",
          "description": "An array containing references to expanded items.",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 8
            },
            "end": {
              "line": 41,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Array"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "",
      "summary": "",
      "path": "vaadin-grid-keyboard-navigation-mixin.html",
      "properties": [
        {
          "name": "_headerFocusable",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 16,
              "column": 8
            },
            "end": {
              "line": 19,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_focusableChanged\""
            }
          }
        },
        {
          "name": "_itemsFocusable",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 20,
              "column": 8
            },
            "end": {
              "line": 23,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_focusableChanged\""
            }
          }
        },
        {
          "name": "_footerFocusable",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 24,
              "column": 8
            },
            "end": {
              "line": 27,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_focusableChanged\""
            }
          }
        },
        {
          "name": "interacting",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 8
            },
            "end": {
              "line": 32,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "navigating",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 8
            },
            "end": {
              "line": 37,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_focusedColumnOrder",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 8
            },
            "end": {
              "line": 38,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 4
            },
            "end": {
              "line": 56,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_focusableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "focusable"
            },
            {
              "name": "oldFocusable"
            }
          ]
        },
        {
          "name": "_onKeyDown",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 4
            },
            "end": {
              "line": 120,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_onNavigationKeyDown",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 4
            },
            "end": {
              "line": 260,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            },
            {
              "name": "key"
            }
          ]
        },
        {
          "name": "_onInteractionKeyDown",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 262,
              "column": 4
            },
            "end": {
              "line": 298,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            },
            {
              "name": "key"
            }
          ]
        },
        {
          "name": "_predictFocusStepTarget",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 300,
              "column": 4
            },
            "end": {
              "line": 317,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "srcElement"
            },
            {
              "name": "step"
            }
          ]
        },
        {
          "name": "_onTabKeyDown",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 319,
              "column": 4
            },
            "end": {
              "line": 328,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_onSpaceKeyDown",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 330,
              "column": 4
            },
            "end": {
              "line": 341,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_onFocusIn",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 343,
              "column": 4
            },
            "end": {
              "line": 353,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_onFocusOut",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 355,
              "column": 4
            },
            "end": {
              "line": 358,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_onCellFocus",
          "description": "Mouse click focuses the cell",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 363,
              "column": 4
            },
            "end": {
              "line": 375,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_detectInteracting",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 377,
              "column": 4
            },
            "end": {
              "line": 379,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_getColumns",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 381,
              "column": 4
            },
            "end": {
              "line": 389,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rowGroup"
            },
            {
              "name": "rowIndex"
            }
          ]
        },
        {
          "name": "_resetKeyboardNavigation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 391,
              "column": 4
            },
            "end": {
              "line": 407,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_focusCell",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 409,
              "column": 4
            },
            "end": {
              "line": 419,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cell"
            },
            {
              "name": "rowGroup"
            },
            {
              "name": "ignoreFocusInCellContent"
            }
          ]
        },
        {
          "name": "_scrollHorizontallyToCell",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 421,
              "column": 4
            },
            "end": {
              "line": 463,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dstCell"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 2
        },
        "end": {
          "line": 464,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "Vaadin.Grid.KeyboardNavigationMixin",
      "attributes": [
        {
          "name": "interacting",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 28,
              "column": 8
            },
            "end": {
              "line": 32,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "navigating",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 8
            },
            "end": {
              "line": 37,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "",
      "summary": "",
      "path": "vaadin-grid-filter-mixin.html",
      "properties": [
        {
          "name": "_filters",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 17,
              "column": 8
            },
            "end": {
              "line": 22,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 4
            },
            "end": {
              "line": 29,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_filterChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 31,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_mapFilters",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 2
        },
        "end": {
          "line": 51,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "Vaadin.Grid.FilterMixin",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "",
      "summary": "",
      "path": "vaadin-grid-column-reordering-mixin.html",
      "properties": [
        {
          "name": "columnReorderingAllowed",
          "type": "boolean",
          "description": "Set to true to allow column reordering.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 8
            },
            "end": {
              "line": 54,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_orderBaseScope",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 8
            },
            "end": {
              "line": 59,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "10000000"
        },
        {
          "name": "_touchDevice",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 61,
              "column": 8
            },
            "end": {
              "line": 70,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 4
            },
            "end": {
              "line": 88,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onContextMenu",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 4
            },
            "end": {
              "line": 94,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_onTouchStart",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 4
            },
            "end": {
              "line": 106,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_onTouchMove",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 4
            },
            "end": {
              "line": 113,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_onTouchEnd",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 4
            },
            "end": {
              "line": 118,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onTrackEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 4
            },
            "end": {
              "line": 131,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_onTrackStart",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 4
            },
            "end": {
              "line": 158,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_onTrack",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 179,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_onTrackEnd",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 4
            },
            "end": {
              "line": 193,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_cellFromPoint",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 195,
              "column": 4
            },
            "end": {
              "line": 211,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "x"
            },
            {
              "name": "y"
            }
          ]
        },
        {
          "name": "_updateGhostPosition",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 213,
              "column": 4
            },
            "end": {
              "line": 224,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventClientX"
            },
            {
              "name": "eventClientY"
            }
          ]
        },
        {
          "name": "_updateGhost",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 226,
              "column": 4
            },
            "end": {
              "line": 235,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cell"
            }
          ]
        },
        {
          "name": "_updateOrders",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 237,
              "column": 4
            },
            "end": {
              "line": 246,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "columnTree"
            },
            {
              "name": "splices"
            }
          ]
        },
        {
          "name": "_setSiblingsReorderStatus",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 248,
              "column": 4
            },
            "end": {
              "line": 254,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "column"
            },
            {
              "name": "status"
            }
          ]
        },
        {
          "name": "_autoScroller",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 256,
              "column": 4
            },
            "end": {
              "line": 272,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_isSwapAllowed",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 274,
              "column": 4
            },
            "end": {
              "line": 281,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "column1"
            },
            {
              "name": "column2"
            }
          ]
        },
        {
          "name": "_isSwappableByPosition",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 4
            },
            "end": {
              "line": 294,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "targetColumn"
            },
            {
              "name": "clientX"
            }
          ]
        },
        {
          "name": "_swapColumnOrders",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 296,
              "column": 4
            },
            "end": {
              "line": 302,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "column1"
            },
            {
              "name": "column2"
            }
          ]
        },
        {
          "name": "_getTargetColumn",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 304,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "targetCell"
            },
            {
              "name": "draggedColumn"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 44,
          "column": 2
        },
        "end": {
          "line": 318,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "Vaadin.Grid.ColumnReorderingMixin",
      "attributes": [
        {
          "name": "column-reordering-allowed",
          "description": "Set to true to allow column reordering.",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 8
            },
            "end": {
              "line": 54,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "",
      "summary": "",
      "path": "vaadin-grid-column-resizing-mixin.html",
      "properties": [],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 4
            },
            "end": {
              "line": 56,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onHeaderTrack",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 4
            },
            "end": {
              "line": 106,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 51,
          "column": 2
        },
        "end": {
          "line": 108,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "Vaadin.Grid.ColumnResizingMixin",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "",
      "summary": "",
      "path": "vaadin-grid-column.html",
      "properties": [
        {
          "name": "resizable",
          "type": "boolean",
          "description": "When set to true, the column is user-resizable.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 24,
              "column": 8
            },
            "end": {
              "line": 38,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "headerTemplate",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 8
            },
            "end": {
              "line": 45,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "footerTemplate",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 8
            },
            "end": {
              "line": 52,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "frozen",
          "type": "boolean",
          "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 8
            },
            "end": {
              "line": 61,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "hidden",
          "type": "boolean",
          "description": "When set to true, the cells for this column are hidden.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 8
            },
            "end": {
              "line": 68,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_lastFrozen",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 8
            },
            "end": {
              "line": 73,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_order",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 8
            },
            "end": {
              "line": 75,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_reorderStatus",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 8
            },
            "end": {
              "line": 77,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_emptyCells",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 8
            },
            "end": {
              "line": 79,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_headerCell",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_footerCell",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 8
            },
            "end": {
              "line": 83,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_grid",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 85,
              "column": 8
            },
            "end": {
              "line": 85,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 4
            },
            "end": {
              "line": 123,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 138,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_prepareHeaderTemplate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 4
            },
            "end": {
              "line": 176,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_prepareFooterTemplate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 178,
              "column": 4
            },
            "end": {
              "line": 180,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_prepareBodyTemplate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 182,
              "column": 4
            },
            "end": {
              "line": 184,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_prepareTemplatizer",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 186,
              "column": 4
            },
            "end": {
              "line": 197,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            },
            {
              "name": "instanceProps"
            }
          ]
        },
        {
          "name": "_emptyCellsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 199,
              "column": 4
            },
            "end": {
              "line": 201,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "emptyCells"
            },
            {
              "name": "splices"
            }
          ]
        },
        {
          "name": "_stampBodyTemplate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 4
            },
            "end": {
              "line": 221,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            },
            {
              "name": "cells"
            }
          ]
        },
        {
          "name": "_stampHeaderTemplate",
          "description": "TODO: DRY",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 224,
              "column": 4
            },
            "end": {
              "line": 233,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "headerTemplate"
            },
            {
              "name": "headerCell"
            }
          ]
        },
        {
          "name": "_stampFooterTemplate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 235,
              "column": 4
            },
            "end": {
              "line": 244,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "footerTemplate"
            },
            {
              "name": "footerCell"
            }
          ]
        },
        {
          "name": "_selectFirstTemplate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 246,
              "column": 4
            },
            "end": {
              "line": 250,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ]
        },
        {
          "name": "_findTemplate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 252,
              "column": 4
            },
            "end": {
              "line": 261,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selector"
            }
          ]
        },
        {
          "name": "_headerTemplateChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 263,
              "column": 4
            },
            "end": {
              "line": 265,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "headerTemplate"
            }
          ]
        },
        {
          "name": "_footerTemplateChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 4
            },
            "end": {
              "line": 269,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "footerTemplate"
            }
          ]
        },
        {
          "name": "_flexGrowChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 271,
              "column": 4
            },
            "end": {
              "line": 277,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "flexGrow"
            },
            {
              "name": "headerCell"
            },
            {
              "name": "footerCell"
            },
            {
              "name": "cells"
            }
          ]
        },
        {
          "name": "_orderChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 279,
              "column": 4
            },
            "end": {
              "line": 281,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "order"
            },
            {
              "name": "headerCell"
            },
            {
              "name": "footerCell"
            },
            {
              "name": "cells"
            }
          ]
        },
        {
          "name": "_widthChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 4
            },
            "end": {
              "line": 289,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "width"
            },
            {
              "name": "headerCell"
            },
            {
              "name": "footerCell"
            },
            {
              "name": "cells"
            }
          ]
        },
        {
          "name": "_frozenChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 291,
              "column": 4
            },
            "end": {
              "line": 299,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "frozen"
            },
            {
              "name": "headerCell"
            },
            {
              "name": "footerCell"
            },
            {
              "name": "cells"
            }
          ]
        },
        {
          "name": "_lastFrozenChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 301,
              "column": 4
            },
            "end": {
              "line": 307,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "lastFrozen"
            }
          ]
        },
        {
          "name": "_toggleAttribute",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 309,
              "column": 4
            },
            "end": {
              "line": 315,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "on"
            },
            {
              "name": "element"
            }
          ]
        },
        {
          "name": "_resizableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 317,
              "column": 4
            },
            "end": {
              "line": 338,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "resizable"
            },
            {
              "name": "headerCell"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 17,
          "column": 2
        },
        "end": {
          "line": 340,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "Vaadin.Grid.ColumnBaseMixin",
      "attributes": [
        {
          "name": "resizable",
          "description": "When set to true, the column is user-resizable.",
          "sourceRange": {
            "start": {
              "line": 24,
              "column": 8
            },
            "end": {
              "line": 38,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "frozen",
          "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 8
            },
            "end": {
              "line": 61,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "hidden",
          "description": "When set to true, the cells for this column are hidden.",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 8
            },
            "end": {
              "line": 68,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    }
  ]
}
